{"ast":null,"code":"/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Buffer } from 'buffer/';\nimport CryptoJS from 'crypto-js/core';\nimport TypedArrays from 'crypto-js/lib-typedarrays'; // necessary for crypto js\n\nimport Base64 from 'crypto-js/enc-base64';\nimport HmacSHA256 from 'crypto-js/hmac-sha256';\nimport BigInteger from './BigInteger';\nimport AuthenticationHelper from './AuthenticationHelper';\nimport CognitoAccessToken from './CognitoAccessToken';\nimport CognitoIdToken from './CognitoIdToken';\nimport CognitoRefreshToken from './CognitoRefreshToken';\nimport CognitoUserSession from './CognitoUserSession';\nimport DateHelper from './DateHelper';\nimport CognitoUserAttribute from './CognitoUserAttribute';\nimport StorageHelper from './StorageHelper';\n/**\n * @callback nodeCallback\n * @template T result\n * @param {*} err The operation failure reason, or null.\n * @param {T} result The operation result.\n */\n\n/**\n * @callback onFailure\n * @param {*} err Failure reason.\n */\n\n/**\n * @callback onSuccess\n * @template T result\n * @param {T} result The operation result.\n */\n\n/**\n * @callback mfaRequired\n * @param {*} details MFA challenge details.\n */\n\n/**\n * @callback customChallenge\n * @param {*} details Custom challenge details.\n */\n\n/**\n * @callback inputVerificationCode\n * @param {*} data Server response.\n */\n\n/**\n * @callback authSuccess\n * @param {CognitoUserSession} session The new session.\n * @param {bool=} userConfirmationNecessary User must be confirmed.\n */\n\n/** @class */\n\nvar CognitoUser =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Constructs a new CognitoUser object\n   * @param {object} data Creation options\n   * @param {string} data.Username The user's username.\n   * @param {CognitoUserPool} data.Pool Pool containing the user.\n   * @param {object} data.Storage Optional storage object.\n   */\n  function CognitoUser(data) {\n    if (data == null || data.Username == null || data.Pool == null) {\n      throw new Error('Username and pool information are required.');\n    }\n\n    this.username = data.Username || '';\n    this.pool = data.Pool;\n    this.Session = null;\n    this.client = data.Pool.client;\n    this.signInUserSession = null;\n    this.authenticationFlowType = 'USER_SRP_AUTH';\n    this.storage = data.Storage || new StorageHelper().getStorage();\n    this.keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId();\n    this.userDataKey = this.keyPrefix + \".\" + this.username + \".userData\";\n  }\n  /**\n   * Sets the session for this user\n   * @param {CognitoUserSession} signInUserSession the session\n   * @returns {void}\n   */\n\n\n  var _proto = CognitoUser.prototype;\n\n  _proto.setSignInUserSession = function setSignInUserSession(signInUserSession) {\n    this.clearCachedUserData();\n    this.signInUserSession = signInUserSession;\n    this.cacheTokens();\n  }\n  /**\n   * @returns {CognitoUserSession} the current session for this user\n   */\n  ;\n\n  _proto.getSignInUserSession = function getSignInUserSession() {\n    return this.signInUserSession;\n  }\n  /**\n   * @returns {string} the user's username\n   */\n  ;\n\n  _proto.getUsername = function getUsername() {\n    return this.username;\n  }\n  /**\n   * @returns {String} the authentication flow type\n   */\n  ;\n\n  _proto.getAuthenticationFlowType = function getAuthenticationFlowType() {\n    return this.authenticationFlowType;\n  }\n  /**\n   * sets authentication flow type\n   * @param {string} authenticationFlowType New value.\n   * @returns {void}\n   */\n  ;\n\n  _proto.setAuthenticationFlowType = function setAuthenticationFlowType(authenticationFlowType) {\n    this.authenticationFlowType = authenticationFlowType;\n  }\n  /**\n   * This is used for authenticating the user through the custom authentication flow.\n   * @param {AuthenticationDetails} authDetails Contains the authentication data\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {customChallenge} callback.customChallenge Custom challenge\n   *        response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */\n  ;\n\n  _proto.initiateAuth = function initiateAuth(authDetails, callback) {\n    var _this = this;\n\n    var authParameters = authDetails.getAuthParameters();\n    authParameters.USERNAME = this.username;\n    var clientMetaData = Object.keys(authDetails.getValidationData()).length !== 0 ? authDetails.getValidationData() : authDetails.getClientMetadata();\n    var jsonReq = {\n      AuthFlow: 'CUSTOM_AUTH',\n      ClientId: this.pool.getClientId(),\n      AuthParameters: authParameters,\n      ClientMetadata: clientMetaData\n    };\n\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('InitiateAuth', jsonReq, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      var challengeName = data.ChallengeName;\n      var challengeParameters = data.ChallengeParameters;\n\n      if (challengeName === 'CUSTOM_CHALLENGE') {\n        _this.Session = data.Session;\n        return callback.customChallenge(challengeParameters);\n      }\n\n      _this.signInUserSession = _this.getCognitoUserSession(data.AuthenticationResult);\n\n      _this.cacheTokens();\n\n      return callback.onSuccess(_this.signInUserSession);\n    });\n  }\n  /**\n   * This is used for authenticating the user.\n   * stuff\n   * @param {AuthenticationDetails} authDetails Contains the authentication data\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {newPasswordRequired} callback.newPasswordRequired new\n   *        password and any required attributes are required to continue\n   * @param {mfaRequired} callback.mfaRequired MFA code\n   *        required to continue.\n   * @param {customChallenge} callback.customChallenge Custom challenge\n   *        response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */\n  ;\n\n  _proto.authenticateUser = function authenticateUser(authDetails, callback) {\n    if (this.authenticationFlowType === 'USER_PASSWORD_AUTH') {\n      return this.authenticateUserPlainUsernamePassword(authDetails, callback);\n    } else if (this.authenticationFlowType === 'USER_SRP_AUTH' || this.authenticationFlowType === 'CUSTOM_AUTH') {\n      return this.authenticateUserDefaultAuth(authDetails, callback);\n    }\n\n    return callback.onFailure(new Error('Authentication flow type is invalid.'));\n  }\n  /**\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   * It calls the AuthenticationHelper for SRP related\n   * stuff\n   * @param {AuthenticationDetails} authDetails Contains the authentication data\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {newPasswordRequired} callback.newPasswordRequired new\n   *        password and any required attributes are required to continue\n   * @param {mfaRequired} callback.mfaRequired MFA code\n   *        required to continue.\n   * @param {customChallenge} callback.customChallenge Custom challenge\n   *        response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */\n  ;\n\n  _proto.authenticateUserDefaultAuth = function authenticateUserDefaultAuth(authDetails, callback) {\n    var _this2 = this;\n\n    var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolId().split('_')[1]);\n    var dateHelper = new DateHelper();\n    var serverBValue;\n    var salt;\n    var authParameters = {};\n\n    if (this.deviceKey != null) {\n      authParameters.DEVICE_KEY = this.deviceKey;\n    }\n\n    authParameters.USERNAME = this.username;\n    authenticationHelper.getLargeAValue(function (errOnAValue, aValue) {\n      // getLargeAValue callback start\n      if (errOnAValue) {\n        callback.onFailure(errOnAValue);\n      }\n\n      authParameters.SRP_A = aValue.toString(16);\n\n      if (_this2.authenticationFlowType === 'CUSTOM_AUTH') {\n        authParameters.CHALLENGE_NAME = 'SRP_A';\n      }\n\n      var clientMetaData = Object.keys(authDetails.getValidationData()).length !== 0 ? authDetails.getValidationData() : authDetails.getClientMetadata();\n      var jsonReq = {\n        AuthFlow: _this2.authenticationFlowType,\n        ClientId: _this2.pool.getClientId(),\n        AuthParameters: authParameters,\n        ClientMetadata: clientMetaData\n      };\n\n      if (_this2.getUserContextData(_this2.username)) {\n        jsonReq.UserContextData = _this2.getUserContextData(_this2.username);\n      }\n\n      _this2.client.request('InitiateAuth', jsonReq, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n\n        var challengeParameters = data.ChallengeParameters;\n        _this2.username = challengeParameters.USER_ID_FOR_SRP;\n        serverBValue = new BigInteger(challengeParameters.SRP_B, 16);\n        salt = new BigInteger(challengeParameters.SALT, 16);\n\n        _this2.getCachedDeviceKeyAndPassword();\n\n        authenticationHelper.getPasswordAuthenticationKey(_this2.username, authDetails.getPassword(), serverBValue, salt, function (errOnHkdf, hkdf) {\n          // getPasswordAuthenticationKey callback start\n          if (errOnHkdf) {\n            callback.onFailure(errOnHkdf);\n          }\n\n          var dateNow = dateHelper.getNowString();\n          var message = CryptoJS.lib.WordArray.create(Buffer.concat([Buffer.from(_this2.pool.getUserPoolId().split('_')[1], 'utf8'), Buffer.from(_this2.username, 'utf8'), Buffer.from(challengeParameters.SECRET_BLOCK, 'base64'), Buffer.from(dateNow, 'utf8')]));\n          var key = CryptoJS.lib.WordArray.create(hkdf);\n          var signatureString = Base64.stringify(HmacSHA256(message, key));\n          var challengeResponses = {};\n          challengeResponses.USERNAME = _this2.username;\n          challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;\n          challengeResponses.TIMESTAMP = dateNow;\n          challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;\n\n          if (_this2.deviceKey != null) {\n            challengeResponses.DEVICE_KEY = _this2.deviceKey;\n          }\n\n          var respondToAuthChallenge = function respondToAuthChallenge(challenge, challengeCallback) {\n            return _this2.client.request('RespondToAuthChallenge', challenge, function (errChallenge, dataChallenge) {\n              if (errChallenge && errChallenge.code === 'ResourceNotFoundException' && errChallenge.message.toLowerCase().indexOf('device') !== -1) {\n                challengeResponses.DEVICE_KEY = null;\n                _this2.deviceKey = null;\n                _this2.randomPassword = null;\n                _this2.deviceGroupKey = null;\n\n                _this2.clearCachedDeviceKeyAndPassword();\n\n                return respondToAuthChallenge(challenge, challengeCallback);\n              }\n\n              return challengeCallback(errChallenge, dataChallenge);\n            });\n          };\n\n          var jsonReqResp = {\n            ChallengeName: 'PASSWORD_VERIFIER',\n            ClientId: _this2.pool.getClientId(),\n            ChallengeResponses: challengeResponses,\n            Session: data.Session,\n            ClientMetadata: clientMetaData\n          };\n\n          if (_this2.getUserContextData()) {\n            jsonReqResp.UserContextData = _this2.getUserContextData();\n          }\n\n          respondToAuthChallenge(jsonReqResp, function (errAuthenticate, dataAuthenticate) {\n            if (errAuthenticate) {\n              return callback.onFailure(errAuthenticate);\n            }\n\n            return _this2.authenticateUserInternal(dataAuthenticate, authenticationHelper, callback);\n          });\n          return undefined; // getPasswordAuthenticationKey callback end\n        });\n        return undefined;\n      }); // getLargeAValue callback end\n\n    });\n  }\n  /**\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   * @param {AuthenticationDetails} authDetails Contains the authentication data.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {mfaRequired} callback.mfaRequired MFA code\n   *        required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */\n  ;\n\n  _proto.authenticateUserPlainUsernamePassword = function authenticateUserPlainUsernamePassword(authDetails, callback) {\n    var _this3 = this;\n\n    var authParameters = {};\n    authParameters.USERNAME = this.username;\n    authParameters.PASSWORD = authDetails.getPassword();\n\n    if (!authParameters.PASSWORD) {\n      callback.onFailure(new Error('PASSWORD parameter is required'));\n      return;\n    }\n\n    var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolId().split('_')[1]);\n    this.getCachedDeviceKeyAndPassword();\n\n    if (this.deviceKey != null) {\n      authParameters.DEVICE_KEY = this.deviceKey;\n    }\n\n    var clientMetaData = Object.keys(authDetails.getValidationData()).length !== 0 ? authDetails.getValidationData() : authDetails.getClientMetadata();\n    var jsonReq = {\n      AuthFlow: 'USER_PASSWORD_AUTH',\n      ClientId: this.pool.getClientId(),\n      AuthParameters: authParameters,\n      ClientMetadata: clientMetaData\n    };\n\n    if (this.getUserContextData(this.username)) {\n      jsonReq.UserContextData = this.getUserContextData(this.username);\n    } // USER_PASSWORD_AUTH happens in a single round-trip: client sends userName and password,\n    // Cognito UserPools verifies password and returns tokens.\n\n\n    this.client.request('InitiateAuth', jsonReq, function (err, authResult) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      return _this3.authenticateUserInternal(authResult, authenticationHelper, callback);\n    });\n  }\n  /**\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   * @param {object} dataAuthenticate authentication data\n   * @param {object} authenticationHelper helper created\n   * @param {callback} callback passed on from caller\n   * @returns {void}\n   */\n  ;\n\n  _proto.authenticateUserInternal = function authenticateUserInternal(dataAuthenticate, authenticationHelper, callback) {\n    var _this4 = this;\n\n    var challengeName = dataAuthenticate.ChallengeName;\n    var challengeParameters = dataAuthenticate.ChallengeParameters;\n\n    if (challengeName === 'SMS_MFA') {\n      this.Session = dataAuthenticate.Session;\n      return callback.mfaRequired(challengeName, challengeParameters);\n    }\n\n    if (challengeName === 'SELECT_MFA_TYPE') {\n      this.Session = dataAuthenticate.Session;\n      return callback.selectMFAType(challengeName, challengeParameters);\n    }\n\n    if (challengeName === 'MFA_SETUP') {\n      this.Session = dataAuthenticate.Session;\n      return callback.mfaSetup(challengeName, challengeParameters);\n    }\n\n    if (challengeName === 'SOFTWARE_TOKEN_MFA') {\n      this.Session = dataAuthenticate.Session;\n      return callback.totpRequired(challengeName, challengeParameters);\n    }\n\n    if (challengeName === 'CUSTOM_CHALLENGE') {\n      this.Session = dataAuthenticate.Session;\n      return callback.customChallenge(challengeParameters);\n    }\n\n    if (challengeName === 'NEW_PASSWORD_REQUIRED') {\n      this.Session = dataAuthenticate.Session;\n      var userAttributes = null;\n      var rawRequiredAttributes = null;\n      var requiredAttributes = [];\n      var userAttributesPrefix = authenticationHelper.getNewPasswordRequiredChallengeUserAttributePrefix();\n\n      if (challengeParameters) {\n        userAttributes = JSON.parse(dataAuthenticate.ChallengeParameters.userAttributes);\n        rawRequiredAttributes = JSON.parse(dataAuthenticate.ChallengeParameters.requiredAttributes);\n      }\n\n      if (rawRequiredAttributes) {\n        for (var i = 0; i < rawRequiredAttributes.length; i++) {\n          requiredAttributes[i] = rawRequiredAttributes[i].substr(userAttributesPrefix.length);\n        }\n      }\n\n      return callback.newPasswordRequired(userAttributes, requiredAttributes);\n    }\n\n    if (challengeName === 'DEVICE_SRP_AUTH') {\n      this.getDeviceResponse(callback);\n      return undefined;\n    }\n\n    this.signInUserSession = this.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n    this.challengeName = challengeName;\n    this.cacheTokens();\n    var newDeviceMetadata = dataAuthenticate.AuthenticationResult.NewDeviceMetadata;\n\n    if (newDeviceMetadata == null) {\n      return callback.onSuccess(this.signInUserSession);\n    }\n\n    authenticationHelper.generateHashDevice(dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey, dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey, function (errGenHash) {\n      if (errGenHash) {\n        return callback.onFailure(errGenHash);\n      }\n\n      var deviceSecretVerifierConfig = {\n        Salt: Buffer.from(authenticationHelper.getSaltDevices(), 'hex').toString('base64'),\n        PasswordVerifier: Buffer.from(authenticationHelper.getVerifierDevices(), 'hex').toString('base64')\n      };\n      _this4.verifierDevices = deviceSecretVerifierConfig.PasswordVerifier;\n      _this4.deviceGroupKey = newDeviceMetadata.DeviceGroupKey;\n      _this4.randomPassword = authenticationHelper.getRandomPassword();\n\n      _this4.client.request('ConfirmDevice', {\n        DeviceKey: newDeviceMetadata.DeviceKey,\n        AccessToken: _this4.signInUserSession.getAccessToken().getJwtToken(),\n        DeviceSecretVerifierConfig: deviceSecretVerifierConfig,\n        DeviceName: navigator.userAgent\n      }, function (errConfirm, dataConfirm) {\n        if (errConfirm) {\n          return callback.onFailure(errConfirm);\n        }\n\n        _this4.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;\n\n        _this4.cacheDeviceKeyAndPassword();\n\n        if (dataConfirm.UserConfirmationNecessary === true) {\n          return callback.onSuccess(_this4.signInUserSession, dataConfirm.UserConfirmationNecessary);\n        }\n\n        return callback.onSuccess(_this4.signInUserSession);\n      });\n\n      return undefined;\n    });\n    return undefined;\n  }\n  /**\n   * This method is user to complete the NEW_PASSWORD_REQUIRED challenge.\n   * Pass the new password with any new user attributes to be updated.\n   * User attribute keys must be of format userAttributes.<attribute_name>.\n   * @param {string} newPassword new password for this user\n   * @param {object} requiredAttributeData map with values for all required attributes\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {mfaRequired} callback.mfaRequired MFA code required to continue.\n   * @param {customChallenge} callback.customChallenge Custom challenge\n   *         response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n  ;\n\n  _proto.completeNewPasswordChallenge = function completeNewPasswordChallenge(newPassword, requiredAttributeData, callback, clientMetadata) {\n    var _this5 = this;\n\n    if (!newPassword) {\n      return callback.onFailure(new Error('New password is required.'));\n    }\n\n    var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolId().split('_')[1]);\n    var userAttributesPrefix = authenticationHelper.getNewPasswordRequiredChallengeUserAttributePrefix();\n    var finalUserAttributes = {};\n\n    if (requiredAttributeData) {\n      Object.keys(requiredAttributeData).forEach(function (key) {\n        finalUserAttributes[userAttributesPrefix + key] = requiredAttributeData[key];\n      });\n    }\n\n    finalUserAttributes.NEW_PASSWORD = newPassword;\n    finalUserAttributes.USERNAME = this.username;\n    var jsonReq = {\n      ChallengeName: 'NEW_PASSWORD_REQUIRED',\n      ClientId: this.pool.getClientId(),\n      ChallengeResponses: finalUserAttributes,\n      Session: this.Session,\n      ClientMetadata: clientMetadata\n    };\n\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('RespondToAuthChallenge', jsonReq, function (errAuthenticate, dataAuthenticate) {\n      if (errAuthenticate) {\n        return callback.onFailure(errAuthenticate);\n      }\n\n      return _this5.authenticateUserInternal(dataAuthenticate, authenticationHelper, callback);\n    });\n    return undefined;\n  }\n  /**\n   * This is used to get a session using device authentication. It is called at the end of user\n   * authentication\n   *\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   * @private\n   */\n  ;\n\n  _proto.getDeviceResponse = function getDeviceResponse(callback, clientMetadata) {\n    var _this6 = this;\n\n    var authenticationHelper = new AuthenticationHelper(this.deviceGroupKey);\n    var dateHelper = new DateHelper();\n    var authParameters = {};\n    authParameters.USERNAME = this.username;\n    authParameters.DEVICE_KEY = this.deviceKey;\n    authenticationHelper.getLargeAValue(function (errAValue, aValue) {\n      // getLargeAValue callback start\n      if (errAValue) {\n        callback.onFailure(errAValue);\n      }\n\n      authParameters.SRP_A = aValue.toString(16);\n      var jsonReq = {\n        ChallengeName: 'DEVICE_SRP_AUTH',\n        ClientId: _this6.pool.getClientId(),\n        ChallengeResponses: authParameters,\n        ClientMetadata: clientMetadata\n      };\n\n      if (_this6.getUserContextData()) {\n        jsonReq.UserContextData = _this6.getUserContextData();\n      }\n\n      _this6.client.request('RespondToAuthChallenge', jsonReq, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n\n        var challengeParameters = data.ChallengeParameters;\n        var serverBValue = new BigInteger(challengeParameters.SRP_B, 16);\n        var salt = new BigInteger(challengeParameters.SALT, 16);\n        authenticationHelper.getPasswordAuthenticationKey(_this6.deviceKey, _this6.randomPassword, serverBValue, salt, function (errHkdf, hkdf) {\n          // getPasswordAuthenticationKey callback start\n          if (errHkdf) {\n            return callback.onFailure(errHkdf);\n          }\n\n          var dateNow = dateHelper.getNowString();\n          var message = CryptoJS.lib.WordArray.create(Buffer.concat([Buffer.from(_this6.deviceGroupKey, 'utf8'), Buffer.from(_this6.deviceKey, 'utf8'), Buffer.from(challengeParameters.SECRET_BLOCK, 'base64'), Buffer.from(dateNow, 'utf8')]));\n          var key = CryptoJS.lib.WordArray.create(hkdf);\n          var signatureString = Base64.stringify(HmacSHA256(message, key));\n          var challengeResponses = {};\n          challengeResponses.USERNAME = _this6.username;\n          challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;\n          challengeResponses.TIMESTAMP = dateNow;\n          challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;\n          challengeResponses.DEVICE_KEY = _this6.deviceKey;\n          var jsonReqResp = {\n            ChallengeName: 'DEVICE_PASSWORD_VERIFIER',\n            ClientId: _this6.pool.getClientId(),\n            ChallengeResponses: challengeResponses,\n            Session: data.Session\n          };\n\n          if (_this6.getUserContextData()) {\n            jsonReqResp.UserContextData = _this6.getUserContextData();\n          }\n\n          _this6.client.request('RespondToAuthChallenge', jsonReqResp, function (errAuthenticate, dataAuthenticate) {\n            if (errAuthenticate) {\n              return callback.onFailure(errAuthenticate);\n            }\n\n            _this6.signInUserSession = _this6.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n\n            _this6.cacheTokens();\n\n            return callback.onSuccess(_this6.signInUserSession);\n          });\n\n          return undefined; // getPasswordAuthenticationKey callback end\n        });\n        return undefined;\n      }); // getLargeAValue callback end\n\n    });\n  }\n  /**\n   * This is used for a certain user to confirm the registration by using a confirmation code\n   * @param {string} confirmationCode Code entered by user.\n   * @param {bool} forceAliasCreation Allow migrating from an existing email / phone number.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n  ;\n\n  _proto.confirmRegistration = function confirmRegistration(confirmationCode, forceAliasCreation, callback, clientMetadata) {\n    var jsonReq = {\n      ClientId: this.pool.getClientId(),\n      ConfirmationCode: confirmationCode,\n      Username: this.username,\n      ForceAliasCreation: forceAliasCreation,\n      ClientMetadata: clientMetadata\n    };\n\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('ConfirmSignUp', jsonReq, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, 'SUCCESS');\n    });\n  }\n  /**\n   * This is used by the user once he has the responses to a custom challenge\n   * @param {string} answerChallenge The custom challenge answer.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {customChallenge} callback.customChallenge\n   *    Custom challenge response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n  ;\n\n  _proto.sendCustomChallengeAnswer = function sendCustomChallengeAnswer(answerChallenge, callback, clientMetadata) {\n    var _this7 = this;\n\n    var challengeResponses = {};\n    challengeResponses.USERNAME = this.username;\n    challengeResponses.ANSWER = answerChallenge;\n    var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolId().split('_')[1]);\n    this.getCachedDeviceKeyAndPassword();\n\n    if (this.deviceKey != null) {\n      challengeResponses.DEVICE_KEY = this.deviceKey;\n    }\n\n    var jsonReq = {\n      ChallengeName: 'CUSTOM_CHALLENGE',\n      ChallengeResponses: challengeResponses,\n      ClientId: this.pool.getClientId(),\n      Session: this.Session,\n      ClientMetadata: clientMetadata\n    };\n\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('RespondToAuthChallenge', jsonReq, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      return _this7.authenticateUserInternal(data, authenticationHelper, callback);\n    });\n  }\n  /**\n   * This is used by the user once he has an MFA code\n   * @param {string} confirmationCode The MFA code entered by the user.\n   * @param {object} callback Result callback map.\n   * @param {string} mfaType The mfa we are replying to.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n  ;\n\n  _proto.sendMFACode = function sendMFACode(confirmationCode, callback, mfaType, clientMetadata) {\n    var _this8 = this;\n\n    var challengeResponses = {};\n    challengeResponses.USERNAME = this.username;\n    challengeResponses.SMS_MFA_CODE = confirmationCode;\n    var mfaTypeSelection = mfaType || 'SMS_MFA';\n\n    if (mfaTypeSelection === 'SOFTWARE_TOKEN_MFA') {\n      challengeResponses.SOFTWARE_TOKEN_MFA_CODE = confirmationCode;\n    }\n\n    if (this.deviceKey != null) {\n      challengeResponses.DEVICE_KEY = this.deviceKey;\n    }\n\n    var jsonReq = {\n      ChallengeName: mfaTypeSelection,\n      ChallengeResponses: challengeResponses,\n      ClientId: this.pool.getClientId(),\n      Session: this.Session,\n      ClientMetadata: clientMetadata\n    };\n\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('RespondToAuthChallenge', jsonReq, function (err, dataAuthenticate) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      var challengeName = dataAuthenticate.ChallengeName;\n\n      if (challengeName === 'DEVICE_SRP_AUTH') {\n        _this8.getDeviceResponse(callback);\n\n        return undefined;\n      }\n\n      _this8.signInUserSession = _this8.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n\n      _this8.cacheTokens();\n\n      if (dataAuthenticate.AuthenticationResult.NewDeviceMetadata == null) {\n        return callback.onSuccess(_this8.signInUserSession);\n      }\n\n      var authenticationHelper = new AuthenticationHelper(_this8.pool.getUserPoolId().split('_')[1]);\n      authenticationHelper.generateHashDevice(dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey, dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey, function (errGenHash) {\n        if (errGenHash) {\n          return callback.onFailure(errGenHash);\n        }\n\n        var deviceSecretVerifierConfig = {\n          Salt: Buffer.from(authenticationHelper.getSaltDevices(), 'hex').toString('base64'),\n          PasswordVerifier: Buffer.from(authenticationHelper.getVerifierDevices(), 'hex').toString('base64')\n        };\n        _this8.verifierDevices = deviceSecretVerifierConfig.PasswordVerifier;\n        _this8.deviceGroupKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey;\n        _this8.randomPassword = authenticationHelper.getRandomPassword();\n\n        _this8.client.request('ConfirmDevice', {\n          DeviceKey: dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey,\n          AccessToken: _this8.signInUserSession.getAccessToken().getJwtToken(),\n          DeviceSecretVerifierConfig: deviceSecretVerifierConfig,\n          DeviceName: navigator.userAgent\n        }, function (errConfirm, dataConfirm) {\n          if (errConfirm) {\n            return callback.onFailure(errConfirm);\n          }\n\n          _this8.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;\n\n          _this8.cacheDeviceKeyAndPassword();\n\n          if (dataConfirm.UserConfirmationNecessary === true) {\n            return callback.onSuccess(_this8.signInUserSession, dataConfirm.UserConfirmationNecessary);\n          }\n\n          return callback.onSuccess(_this8.signInUserSession);\n        });\n\n        return undefined;\n      });\n      return undefined;\n    });\n  }\n  /**\n   * This is used by an authenticated user to change the current password\n   * @param {string} oldUserPassword The current password.\n   * @param {string} newUserPassword The requested new password.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n  ;\n\n  _proto.changePassword = function changePassword(oldUserPassword, newUserPassword, callback, clientMetadata) {\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.request('ChangePassword', {\n      PreviousPassword: oldUserPassword,\n      ProposedPassword: newUserPassword,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      ClientMetadata: clientMetadata\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * This is used by an authenticated user to enable MFA for itself\n   * @deprecated\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  ;\n\n  _proto.enableMFA = function enableMFA(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    var mfaOptions = [];\n    var mfaEnabled = {\n      DeliveryMedium: 'SMS',\n      AttributeName: 'phone_number'\n    };\n    mfaOptions.push(mfaEnabled);\n    this.client.request('SetUserSettings', {\n      MFAOptions: mfaOptions,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * This is used by an authenticated user to enable MFA for itself\n   * @param {IMfaSettings} smsMfaSettings the sms mfa settings\n   * @param {IMFASettings} softwareTokenMfaSettings the software token mfa settings\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  ;\n\n  _proto.setUserMfaPreference = function setUserMfaPreference(smsMfaSettings, softwareTokenMfaSettings, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.request('SetUserMFAPreference', {\n      SMSMfaSettings: smsMfaSettings,\n      SoftwareTokenMfaSettings: softwareTokenMfaSettings,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * This is used by an authenticated user to disable MFA for itself\n   * @deprecated\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  ;\n\n  _proto.disableMFA = function disableMFA(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    var mfaOptions = [];\n    this.client.request('SetUserSettings', {\n      MFAOptions: mfaOptions,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * This is used by an authenticated user to delete itself\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n  ;\n\n  _proto.deleteUser = function deleteUser(callback, clientMetadata) {\n    var _this9 = this;\n\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.request('DeleteUser', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      ClientMetadata: clientMetadata\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      _this9.clearCachedUser();\n\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * @typedef {CognitoUserAttribute | { Name:string, Value:string }} AttributeArg\n   */\n\n  /**\n   * This is used by an authenticated user to change a list of attributes\n   * @param {AttributeArg[]} attributes A list of the new user attributes.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n  ;\n\n  _proto.updateAttributes = function updateAttributes(attributes, callback, clientMetadata) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.request('UpdateUserAttributes', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      UserAttributes: attributes,\n      ClientMetadata: clientMetadata\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * This is used by an authenticated user to get a list of attributes\n   * @param {nodeCallback<CognitoUserAttribute[]>} callback Called on success or error.\n   * @returns {void}\n   */\n  ;\n\n  _proto.getUserAttributes = function getUserAttributes(callback) {\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.request('GetUser', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err, userData) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      var attributeList = [];\n\n      for (var i = 0; i < userData.UserAttributes.length; i++) {\n        var attribute = {\n          Name: userData.UserAttributes[i].Name,\n          Value: userData.UserAttributes[i].Value\n        };\n        var userAttribute = new CognitoUserAttribute(attribute);\n        attributeList.push(userAttribute);\n      }\n\n      return callback(null, attributeList);\n    });\n    return undefined;\n  }\n  /**\n   * This is used by an authenticated user to get the MFAOptions\n   * @param {nodeCallback<MFAOptions>} callback Called on success or error.\n   * @returns {void}\n   */\n  ;\n\n  _proto.getMFAOptions = function getMFAOptions(callback) {\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.request('GetUser', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err, userData) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, userData.MFAOptions);\n    });\n    return undefined;\n  }\n  /**\n   * This is used by an authenticated users to get the userData\n   * @param {nodeCallback<UserData>} callback Called on success or error.\n   * @returns {void}\n   */\n  ;\n\n  _proto.getUserData = function getUserData(callback, params) {\n    var _this10 = this;\n\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      this.clearCachedUserData();\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    var bypassCache = params ? params.bypassCache : false;\n    var userData = this.storage.getItem(this.userDataKey); // get the cached user data\n\n    if (!userData || bypassCache) {\n      this.client.request('GetUser', {\n        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n      }, function (err, latestUserData) {\n        if (err) {\n          return callback(err, null);\n        }\n\n        _this10.cacheUserData(latestUserData);\n\n        var refresh = _this10.signInUserSession.getRefreshToken();\n\n        if (refresh && refresh.getToken()) {\n          _this10.refreshSession(refresh, function (refreshError, data) {\n            if (refreshError) {\n              return callback(refreshError, null);\n            }\n\n            return callback(null, latestUserData);\n          });\n        } else {\n          return callback(null, latestUserData);\n        }\n      });\n    } else {\n      try {\n        return callback(null, JSON.parse(userData));\n      } catch (err) {\n        this.clearCachedUserData();\n        return callback(err, null);\n      }\n    }\n\n    return undefined;\n  }\n  /**\n   * This is used by an authenticated user to delete a list of attributes\n   * @param {string[]} attributeList Names of the attributes to delete.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  ;\n\n  _proto.deleteAttributes = function deleteAttributes(attributeList, callback) {\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.request('DeleteUserAttributes', {\n      UserAttributeNames: attributeList,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * This is used by a user to resend a confirmation code\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n  ;\n\n  _proto.resendConfirmationCode = function resendConfirmationCode(callback, clientMetadata) {\n    var jsonReq = {\n      ClientId: this.pool.getClientId(),\n      Username: this.username,\n      ClientMetadata: clientMetadata\n    };\n    this.client.request('ResendConfirmationCode', jsonReq, function (err, result) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, result);\n    });\n  }\n  /**\n   * This is used to get a session, either from the session object\n   * or from  the local storage, or by using a refresh token\n   *\n   * @param {nodeCallback<CognitoUserSession>} callback Called on success or error.\n   * @returns {void}\n   */\n  ;\n\n  _proto.getSession = function getSession(callback) {\n    if (this.username == null) {\n      return callback(new Error('Username is null. Cannot retrieve a new session'), null);\n    }\n\n    if (this.signInUserSession != null && this.signInUserSession.isValid()) {\n      return callback(null, this.signInUserSession);\n    }\n\n    var keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId() + \".\" + this.username;\n    var idTokenKey = keyPrefix + \".idToken\";\n    var accessTokenKey = keyPrefix + \".accessToken\";\n    var refreshTokenKey = keyPrefix + \".refreshToken\";\n    var clockDriftKey = keyPrefix + \".clockDrift\";\n\n    if (this.storage.getItem(idTokenKey)) {\n      var idToken = new CognitoIdToken({\n        IdToken: this.storage.getItem(idTokenKey)\n      });\n      var accessToken = new CognitoAccessToken({\n        AccessToken: this.storage.getItem(accessTokenKey)\n      });\n      var refreshToken = new CognitoRefreshToken({\n        RefreshToken: this.storage.getItem(refreshTokenKey)\n      });\n      var clockDrift = parseInt(this.storage.getItem(clockDriftKey), 0) || 0;\n      var sessionData = {\n        IdToken: idToken,\n        AccessToken: accessToken,\n        RefreshToken: refreshToken,\n        ClockDrift: clockDrift\n      };\n      var cachedSession = new CognitoUserSession(sessionData);\n\n      if (cachedSession.isValid()) {\n        this.signInUserSession = cachedSession;\n        return callback(null, this.signInUserSession);\n      }\n\n      if (!refreshToken.getToken()) {\n        return callback(new Error('Cannot retrieve a new session. Please authenticate.'), null);\n      }\n\n      this.refreshSession(refreshToken, callback);\n    } else {\n      callback(new Error('Local storage is missing an ID Token, Please authenticate'), null);\n    }\n\n    return undefined;\n  }\n  /**\n   * This uses the refreshToken to retrieve a new session\n   * @param {CognitoRefreshToken} refreshToken A previous session's refresh token.\n   * @param {nodeCallback<CognitoUserSession>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n  ;\n\n  _proto.refreshSession = function refreshSession(refreshToken, callback, clientMetadata) {\n    var _this11 = this;\n\n    var authParameters = {};\n    authParameters.REFRESH_TOKEN = refreshToken.getToken();\n    var keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId();\n    var lastUserKey = keyPrefix + \".LastAuthUser\";\n\n    if (this.storage.getItem(lastUserKey)) {\n      this.username = this.storage.getItem(lastUserKey);\n      var deviceKeyKey = keyPrefix + \".\" + this.username + \".deviceKey\";\n      this.deviceKey = this.storage.getItem(deviceKeyKey);\n      authParameters.DEVICE_KEY = this.deviceKey;\n    }\n\n    var jsonReq = {\n      ClientId: this.pool.getClientId(),\n      AuthFlow: 'REFRESH_TOKEN_AUTH',\n      AuthParameters: authParameters,\n      ClientMetadata: clientMetadata\n    };\n\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('InitiateAuth', jsonReq, function (err, authResult) {\n      if (err) {\n        if (err.code === 'NotAuthorizedException') {\n          _this11.clearCachedUser();\n        }\n\n        return callback(err, null);\n      }\n\n      if (authResult) {\n        var authenticationResult = authResult.AuthenticationResult;\n\n        if (!Object.prototype.hasOwnProperty.call(authenticationResult, 'RefreshToken')) {\n          authenticationResult.RefreshToken = refreshToken.getToken();\n        }\n\n        _this11.signInUserSession = _this11.getCognitoUserSession(authenticationResult);\n\n        _this11.cacheTokens();\n\n        return callback(null, _this11.signInUserSession);\n      }\n\n      return undefined;\n    });\n  }\n  /**\n   * This is used to save the session tokens to local storage\n   * @returns {void}\n   */\n  ;\n\n  _proto.cacheTokens = function cacheTokens() {\n    var keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId();\n    var idTokenKey = keyPrefix + \".\" + this.username + \".idToken\";\n    var accessTokenKey = keyPrefix + \".\" + this.username + \".accessToken\";\n    var refreshTokenKey = keyPrefix + \".\" + this.username + \".refreshToken\";\n    var clockDriftKey = keyPrefix + \".\" + this.username + \".clockDrift\";\n    var lastUserKey = keyPrefix + \".LastAuthUser\";\n    this.storage.setItem(idTokenKey, this.signInUserSession.getIdToken().getJwtToken());\n    this.storage.setItem(accessTokenKey, this.signInUserSession.getAccessToken().getJwtToken());\n    this.storage.setItem(refreshTokenKey, this.signInUserSession.getRefreshToken().getToken());\n    this.storage.setItem(clockDriftKey, \"\" + this.signInUserSession.getClockDrift());\n    this.storage.setItem(lastUserKey, this.username);\n  }\n  /**\n   * This is to cache user data\n   */\n  ;\n\n  _proto.cacheUserData = function cacheUserData(userData) {\n    this.storage.setItem(this.userDataKey, JSON.stringify(userData));\n  }\n  /**\n   * This is to remove cached user data\n   */\n  ;\n\n  _proto.clearCachedUserData = function clearCachedUserData() {\n    this.storage.removeItem(this.userDataKey);\n  };\n\n  _proto.clearCachedUser = function clearCachedUser() {\n    this.clearCachedTokens();\n    this.clearCachedUserData();\n  }\n  /**\n   * This is used to cache the device key and device group and device password\n   * @returns {void}\n   */\n  ;\n\n  _proto.cacheDeviceKeyAndPassword = function cacheDeviceKeyAndPassword() {\n    var keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId() + \".\" + this.username;\n    var deviceKeyKey = keyPrefix + \".deviceKey\";\n    var randomPasswordKey = keyPrefix + \".randomPasswordKey\";\n    var deviceGroupKeyKey = keyPrefix + \".deviceGroupKey\";\n    this.storage.setItem(deviceKeyKey, this.deviceKey);\n    this.storage.setItem(randomPasswordKey, this.randomPassword);\n    this.storage.setItem(deviceGroupKeyKey, this.deviceGroupKey);\n  }\n  /**\n   * This is used to get current device key and device group and device password\n   * @returns {void}\n   */\n  ;\n\n  _proto.getCachedDeviceKeyAndPassword = function getCachedDeviceKeyAndPassword() {\n    var keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId() + \".\" + this.username;\n    var deviceKeyKey = keyPrefix + \".deviceKey\";\n    var randomPasswordKey = keyPrefix + \".randomPasswordKey\";\n    var deviceGroupKeyKey = keyPrefix + \".deviceGroupKey\";\n\n    if (this.storage.getItem(deviceKeyKey)) {\n      this.deviceKey = this.storage.getItem(deviceKeyKey);\n      this.randomPassword = this.storage.getItem(randomPasswordKey);\n      this.deviceGroupKey = this.storage.getItem(deviceGroupKeyKey);\n    }\n  }\n  /**\n   * This is used to clear the device key info from local storage\n   * @returns {void}\n   */\n  ;\n\n  _proto.clearCachedDeviceKeyAndPassword = function clearCachedDeviceKeyAndPassword() {\n    var keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId() + \".\" + this.username;\n    var deviceKeyKey = keyPrefix + \".deviceKey\";\n    var randomPasswordKey = keyPrefix + \".randomPasswordKey\";\n    var deviceGroupKeyKey = keyPrefix + \".deviceGroupKey\";\n    this.storage.removeItem(deviceKeyKey);\n    this.storage.removeItem(randomPasswordKey);\n    this.storage.removeItem(deviceGroupKeyKey);\n  }\n  /**\n   * This is used to clear the session tokens from local storage\n   * @returns {void}\n   */\n  ;\n\n  _proto.clearCachedTokens = function clearCachedTokens() {\n    var keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId();\n    var idTokenKey = keyPrefix + \".\" + this.username + \".idToken\";\n    var accessTokenKey = keyPrefix + \".\" + this.username + \".accessToken\";\n    var refreshTokenKey = keyPrefix + \".\" + this.username + \".refreshToken\";\n    var lastUserKey = keyPrefix + \".LastAuthUser\";\n    var clockDriftKey = keyPrefix + \".\" + this.username + \".clockDrift\";\n    this.storage.removeItem(idTokenKey);\n    this.storage.removeItem(accessTokenKey);\n    this.storage.removeItem(refreshTokenKey);\n    this.storage.removeItem(lastUserKey);\n    this.storage.removeItem(clockDriftKey);\n  }\n  /**\n   * This is used to build a user session from tokens retrieved in the authentication result\n   * @param {object} authResult Successful auth response from server.\n   * @returns {CognitoUserSession} The new user session.\n   * @private\n   */\n  ;\n\n  _proto.getCognitoUserSession = function getCognitoUserSession(authResult) {\n    var idToken = new CognitoIdToken(authResult);\n    var accessToken = new CognitoAccessToken(authResult);\n    var refreshToken = new CognitoRefreshToken(authResult);\n    var sessionData = {\n      IdToken: idToken,\n      AccessToken: accessToken,\n      RefreshToken: refreshToken\n    };\n    return new CognitoUserSession(sessionData);\n  }\n  /**\n   * This is used to initiate a forgot password request\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {inputVerificationCode?} callback.inputVerificationCode\n   *    Optional callback raised instead of onSuccess with response data.\n   * @param {onSuccess} callback.onSuccess Called on success.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n  ;\n\n  _proto.forgotPassword = function forgotPassword(callback, clientMetadata) {\n    var jsonReq = {\n      ClientId: this.pool.getClientId(),\n      Username: this.username,\n      ClientMetadata: clientMetadata\n    };\n\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('ForgotPassword', jsonReq, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      if (typeof callback.inputVerificationCode === 'function') {\n        return callback.inputVerificationCode(data);\n      }\n\n      return callback.onSuccess(data);\n    });\n  }\n  /**\n   * This is used to confirm a new password using a confirmationCode\n   * @param {string} confirmationCode Code entered by user.\n   * @param {string} newPassword Confirm new password.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<void>} callback.onSuccess Called on success.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n  ;\n\n  _proto.confirmPassword = function confirmPassword(confirmationCode, newPassword, callback, clientMetadata) {\n    var jsonReq = {\n      ClientId: this.pool.getClientId(),\n      Username: this.username,\n      ConfirmationCode: confirmationCode,\n      Password: newPassword,\n      ClientMetadata: clientMetadata\n    };\n\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('ConfirmForgotPassword', jsonReq, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      return callback.onSuccess();\n    });\n  }\n  /**\n   * This is used to initiate an attribute confirmation request\n   * @param {string} attributeName User attribute that needs confirmation.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {inputVerificationCode} callback.inputVerificationCode Called on success.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n  ;\n\n  _proto.getAttributeVerificationCode = function getAttributeVerificationCode(attributeName, callback, clientMetadata) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.request('GetUserAttributeVerificationCode', {\n      AttributeName: attributeName,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      ClientMetadata: clientMetadata\n    }, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      if (typeof callback.inputVerificationCode === 'function') {\n        return callback.inputVerificationCode(data);\n      }\n\n      return callback.onSuccess();\n    });\n    return undefined;\n  }\n  /**\n   * This is used to confirm an attribute using a confirmation code\n   * @param {string} attributeName Attribute being confirmed.\n   * @param {string} confirmationCode Code entered by user.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n  ;\n\n  _proto.verifyAttribute = function verifyAttribute(attributeName, confirmationCode, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.request('VerifyUserAttribute', {\n      AttributeName: attributeName,\n      Code: confirmationCode,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * This is used to get the device information using the current device key\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<*>} callback.onSuccess Called on success with device data.\n   * @returns {void}\n   */\n  ;\n\n  _proto.getDevice = function getDevice(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.request('GetDevice', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceKey: this.deviceKey\n    }, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      return callback.onSuccess(data);\n    });\n    return undefined;\n  }\n  /**\n   * This is used to forget a specific device\n   * @param {string} deviceKey Device key.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n  ;\n\n  _proto.forgetSpecificDevice = function forgetSpecificDevice(deviceKey, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.request('ForgetDevice', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceKey: deviceKey\n    }, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * This is used to forget the current device\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n  ;\n\n  _proto.forgetDevice = function forgetDevice(callback) {\n    var _this12 = this;\n\n    this.forgetSpecificDevice(this.deviceKey, {\n      onFailure: callback.onFailure,\n      onSuccess: function onSuccess(result) {\n        _this12.deviceKey = null;\n        _this12.deviceGroupKey = null;\n        _this12.randomPassword = null;\n\n        _this12.clearCachedDeviceKeyAndPassword();\n\n        return callback.onSuccess(result);\n      }\n    });\n  }\n  /**\n   * This is used to set the device status as remembered\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n  ;\n\n  _proto.setDeviceStatusRemembered = function setDeviceStatusRemembered(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.request('UpdateDeviceStatus', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceKey: this.deviceKey,\n      DeviceRememberedStatus: 'remembered'\n    }, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * This is used to set the device status as not remembered\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n  ;\n\n  _proto.setDeviceStatusNotRemembered = function setDeviceStatusNotRemembered(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.request('UpdateDeviceStatus', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceKey: this.deviceKey,\n      DeviceRememberedStatus: 'not_remembered'\n    }, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * This is used to list all devices for a user\n   *\n   * @param {int} limit the number of devices returned in a call\n   * @param {string} paginationToken the pagination token in case any was returned before\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<*>} callback.onSuccess Called on success with device list.\n   * @returns {void}\n   */\n  ;\n\n  _proto.listDevices = function listDevices(limit, paginationToken, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.request('ListDevices', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      Limit: limit,\n      PaginationToken: paginationToken\n    }, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      return callback.onSuccess(data);\n    });\n    return undefined;\n  }\n  /**\n   * This is used to globally revoke all tokens issued to a user\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n  ;\n\n  _proto.globalSignOut = function globalSignOut(callback) {\n    var _this13 = this;\n\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.request('GlobalSignOut', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      _this13.clearCachedUser();\n\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * This is used for the user to signOut of the application and clear the cached tokens.\n   * @returns {void}\n   */\n  ;\n\n  _proto.signOut = function signOut() {\n    this.signInUserSession = null;\n    this.clearCachedUser();\n  }\n  /**\n   * This is used by a user trying to select a given MFA\n   * @param {string} answerChallenge the mfa the user wants\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  ;\n\n  _proto.sendMFASelectionAnswer = function sendMFASelectionAnswer(answerChallenge, callback) {\n    var _this14 = this;\n\n    var challengeResponses = {};\n    challengeResponses.USERNAME = this.username;\n    challengeResponses.ANSWER = answerChallenge;\n    var jsonReq = {\n      ChallengeName: 'SELECT_MFA_TYPE',\n      ChallengeResponses: challengeResponses,\n      ClientId: this.pool.getClientId(),\n      Session: this.Session\n    };\n\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('RespondToAuthChallenge', jsonReq, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      _this14.Session = data.Session;\n\n      if (answerChallenge === 'SMS_MFA') {\n        return callback.mfaRequired(data.challengeName, data.challengeParameters);\n      }\n\n      if (answerChallenge === 'SOFTWARE_TOKEN_MFA') {\n        return callback.totpRequired(data.challengeName, data.challengeParameters);\n      }\n\n      return undefined;\n    });\n  }\n  /**\n   * This returns the user context data for advanced security feature.\n   * @returns {void}\n   */\n  ;\n\n  _proto.getUserContextData = function getUserContextData() {\n    var pool = this.pool;\n    return pool.getUserContextData(this.username);\n  }\n  /**\n   * This is used by an authenticated or a user trying to authenticate to associate a TOTP MFA\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  ;\n\n  _proto.associateSoftwareToken = function associateSoftwareToken(callback) {\n    var _this15 = this;\n\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      this.client.request('AssociateSoftwareToken', {\n        Session: this.Session\n      }, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n\n        _this15.Session = data.Session;\n        return callback.associateSecretCode(data.SecretCode);\n      });\n    } else {\n      this.client.request('AssociateSoftwareToken', {\n        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n      }, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n\n        return callback.associateSecretCode(data.SecretCode);\n      });\n    }\n  }\n  /**\n   * This is used by an authenticated or a user trying to authenticate to verify a TOTP MFA\n   * @param {string} totpCode The MFA code entered by the user.\n   * @param {string} friendlyDeviceName The device name we are assigning to the device.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  ;\n\n  _proto.verifySoftwareToken = function verifySoftwareToken(totpCode, friendlyDeviceName, callback) {\n    var _this16 = this;\n\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      this.client.request('VerifySoftwareToken', {\n        Session: this.Session,\n        UserCode: totpCode,\n        FriendlyDeviceName: friendlyDeviceName\n      }, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n\n        _this16.Session = data.Session;\n        var challengeResponses = {};\n        challengeResponses.USERNAME = _this16.username;\n        var jsonReq = {\n          ChallengeName: 'MFA_SETUP',\n          ClientId: _this16.pool.getClientId(),\n          ChallengeResponses: challengeResponses,\n          Session: _this16.Session\n        };\n\n        if (_this16.getUserContextData()) {\n          jsonReq.UserContextData = _this16.getUserContextData();\n        }\n\n        _this16.client.request('RespondToAuthChallenge', jsonReq, function (errRespond, dataRespond) {\n          if (errRespond) {\n            return callback.onFailure(errRespond);\n          }\n\n          _this16.signInUserSession = _this16.getCognitoUserSession(dataRespond.AuthenticationResult);\n\n          _this16.cacheTokens();\n\n          return callback.onSuccess(_this16.signInUserSession);\n        });\n\n        return undefined;\n      });\n    } else {\n      this.client.request('VerifySoftwareToken', {\n        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n        UserCode: totpCode,\n        FriendlyDeviceName: friendlyDeviceName\n      }, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n\n        return callback.onSuccess(data);\n      });\n    }\n  };\n\n  return CognitoUser;\n}();\n\nexport { CognitoUser as default };","map":{"version":3,"sources":["/Users/mwalkowiak/Library/Mobile Documents/com~apple~CloudDocs/Documents/Demos/Amplify/node_modules/amazon-cognito-identity-js/es/CognitoUser.js"],"names":["Buffer","CryptoJS","TypedArrays","Base64","HmacSHA256","BigInteger","AuthenticationHelper","CognitoAccessToken","CognitoIdToken","CognitoRefreshToken","CognitoUserSession","DateHelper","CognitoUserAttribute","StorageHelper","CognitoUser","data","Username","Pool","Error","username","pool","Session","client","signInUserSession","authenticationFlowType","storage","Storage","getStorage","keyPrefix","getClientId","userDataKey","_proto","prototype","setSignInUserSession","clearCachedUserData","cacheTokens","getSignInUserSession","getUsername","getAuthenticationFlowType","setAuthenticationFlowType","initiateAuth","authDetails","callback","_this","authParameters","getAuthParameters","USERNAME","clientMetaData","Object","keys","getValidationData","length","getClientMetadata","jsonReq","AuthFlow","ClientId","AuthParameters","ClientMetadata","getUserContextData","UserContextData","request","err","onFailure","challengeName","ChallengeName","challengeParameters","ChallengeParameters","customChallenge","getCognitoUserSession","AuthenticationResult","onSuccess","authenticateUser","authenticateUserPlainUsernamePassword","authenticateUserDefaultAuth","_this2","authenticationHelper","getUserPoolId","split","dateHelper","serverBValue","salt","deviceKey","DEVICE_KEY","getLargeAValue","errOnAValue","aValue","SRP_A","toString","CHALLENGE_NAME","USER_ID_FOR_SRP","SRP_B","SALT","getCachedDeviceKeyAndPassword","getPasswordAuthenticationKey","getPassword","errOnHkdf","hkdf","dateNow","getNowString","message","lib","WordArray","create","concat","from","SECRET_BLOCK","key","signatureString","stringify","challengeResponses","PASSWORD_CLAIM_SECRET_BLOCK","TIMESTAMP","PASSWORD_CLAIM_SIGNATURE","respondToAuthChallenge","challenge","challengeCallback","errChallenge","dataChallenge","code","toLowerCase","indexOf","randomPassword","deviceGroupKey","clearCachedDeviceKeyAndPassword","jsonReqResp","ChallengeResponses","errAuthenticate","dataAuthenticate","authenticateUserInternal","undefined","_this3","PASSWORD","authResult","_this4","mfaRequired","selectMFAType","mfaSetup","totpRequired","userAttributes","rawRequiredAttributes","requiredAttributes","userAttributesPrefix","getNewPasswordRequiredChallengeUserAttributePrefix","JSON","parse","i","substr","newPasswordRequired","getDeviceResponse","newDeviceMetadata","NewDeviceMetadata","generateHashDevice","DeviceGroupKey","DeviceKey","errGenHash","deviceSecretVerifierConfig","Salt","getSaltDevices","PasswordVerifier","getVerifierDevices","verifierDevices","getRandomPassword","AccessToken","getAccessToken","getJwtToken","DeviceSecretVerifierConfig","DeviceName","navigator","userAgent","errConfirm","dataConfirm","cacheDeviceKeyAndPassword","UserConfirmationNecessary","completeNewPasswordChallenge","newPassword","requiredAttributeData","clientMetadata","_this5","finalUserAttributes","forEach","NEW_PASSWORD","_this6","errAValue","errHkdf","confirmRegistration","confirmationCode","forceAliasCreation","ConfirmationCode","ForceAliasCreation","sendCustomChallengeAnswer","answerChallenge","_this7","ANSWER","sendMFACode","mfaType","_this8","SMS_MFA_CODE","mfaTypeSelection","SOFTWARE_TOKEN_MFA_CODE","changePassword","oldUserPassword","newUserPassword","isValid","PreviousPassword","ProposedPassword","enableMFA","mfaOptions","mfaEnabled","DeliveryMedium","AttributeName","push","MFAOptions","setUserMfaPreference","smsMfaSettings","softwareTokenMfaSettings","SMSMfaSettings","SoftwareTokenMfaSettings","disableMFA","deleteUser","_this9","clearCachedUser","updateAttributes","attributes","UserAttributes","getUserAttributes","userData","attributeList","attribute","Name","Value","userAttribute","getMFAOptions","getUserData","params","_this10","bypassCache","getItem","latestUserData","cacheUserData","refresh","getRefreshToken","getToken","refreshSession","refreshError","deleteAttributes","UserAttributeNames","resendConfirmationCode","result","getSession","idTokenKey","accessTokenKey","refreshTokenKey","clockDriftKey","idToken","IdToken","accessToken","refreshToken","RefreshToken","clockDrift","parseInt","sessionData","ClockDrift","cachedSession","_this11","REFRESH_TOKEN","lastUserKey","deviceKeyKey","authenticationResult","hasOwnProperty","call","setItem","getIdToken","getClockDrift","removeItem","clearCachedTokens","randomPasswordKey","deviceGroupKeyKey","forgotPassword","inputVerificationCode","confirmPassword","Password","getAttributeVerificationCode","attributeName","verifyAttribute","Code","getDevice","forgetSpecificDevice","forgetDevice","_this12","setDeviceStatusRemembered","DeviceRememberedStatus","setDeviceStatusNotRemembered","listDevices","limit","paginationToken","Limit","PaginationToken","globalSignOut","_this13","signOut","sendMFASelectionAnswer","_this14","associateSoftwareToken","_this15","associateSecretCode","SecretCode","verifySoftwareToken","totpCode","friendlyDeviceName","_this16","UserCode","FriendlyDeviceName","errRespond","dataRespond","default"],"mappings":"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","sourcesContent":["/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Buffer } from 'buffer/';\nimport CryptoJS from 'crypto-js/core';\nimport TypedArrays from 'crypto-js/lib-typedarrays'; // necessary for crypto js\n\nimport Base64 from 'crypto-js/enc-base64';\nimport HmacSHA256 from 'crypto-js/hmac-sha256';\nimport BigInteger from './BigInteger';\nimport AuthenticationHelper from './AuthenticationHelper';\nimport CognitoAccessToken from './CognitoAccessToken';\nimport CognitoIdToken from './CognitoIdToken';\nimport CognitoRefreshToken from './CognitoRefreshToken';\nimport CognitoUserSession from './CognitoUserSession';\nimport DateHelper from './DateHelper';\nimport CognitoUserAttribute from './CognitoUserAttribute';\nimport StorageHelper from './StorageHelper';\n/**\n * @callback nodeCallback\n * @template T result\n * @param {*} err The operation failure reason, or null.\n * @param {T} result The operation result.\n */\n\n/**\n * @callback onFailure\n * @param {*} err Failure reason.\n */\n\n/**\n * @callback onSuccess\n * @template T result\n * @param {T} result The operation result.\n */\n\n/**\n * @callback mfaRequired\n * @param {*} details MFA challenge details.\n */\n\n/**\n * @callback customChallenge\n * @param {*} details Custom challenge details.\n */\n\n/**\n * @callback inputVerificationCode\n * @param {*} data Server response.\n */\n\n/**\n * @callback authSuccess\n * @param {CognitoUserSession} session The new session.\n * @param {bool=} userConfirmationNecessary User must be confirmed.\n */\n\n/** @class */\n\nvar CognitoUser =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Constructs a new CognitoUser object\n   * @param {object} data Creation options\n   * @param {string} data.Username The user's username.\n   * @param {CognitoUserPool} data.Pool Pool containing the user.\n   * @param {object} data.Storage Optional storage object.\n   */\n  function CognitoUser(data) {\n    if (data == null || data.Username == null || data.Pool == null) {\n      throw new Error('Username and pool information are required.');\n    }\n\n    this.username = data.Username || '';\n    this.pool = data.Pool;\n    this.Session = null;\n    this.client = data.Pool.client;\n    this.signInUserSession = null;\n    this.authenticationFlowType = 'USER_SRP_AUTH';\n    this.storage = data.Storage || new StorageHelper().getStorage();\n    this.keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId();\n    this.userDataKey = this.keyPrefix + \".\" + this.username + \".userData\";\n  }\n  /**\n   * Sets the session for this user\n   * @param {CognitoUserSession} signInUserSession the session\n   * @returns {void}\n   */\n\n\n  var _proto = CognitoUser.prototype;\n\n  _proto.setSignInUserSession = function setSignInUserSession(signInUserSession) {\n    this.clearCachedUserData();\n    this.signInUserSession = signInUserSession;\n    this.cacheTokens();\n  }\n  /**\n   * @returns {CognitoUserSession} the current session for this user\n   */\n  ;\n\n  _proto.getSignInUserSession = function getSignInUserSession() {\n    return this.signInUserSession;\n  }\n  /**\n   * @returns {string} the user's username\n   */\n  ;\n\n  _proto.getUsername = function getUsername() {\n    return this.username;\n  }\n  /**\n   * @returns {String} the authentication flow type\n   */\n  ;\n\n  _proto.getAuthenticationFlowType = function getAuthenticationFlowType() {\n    return this.authenticationFlowType;\n  }\n  /**\n   * sets authentication flow type\n   * @param {string} authenticationFlowType New value.\n   * @returns {void}\n   */\n  ;\n\n  _proto.setAuthenticationFlowType = function setAuthenticationFlowType(authenticationFlowType) {\n    this.authenticationFlowType = authenticationFlowType;\n  }\n  /**\n   * This is used for authenticating the user through the custom authentication flow.\n   * @param {AuthenticationDetails} authDetails Contains the authentication data\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {customChallenge} callback.customChallenge Custom challenge\n   *        response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */\n  ;\n\n  _proto.initiateAuth = function initiateAuth(authDetails, callback) {\n    var _this = this;\n\n    var authParameters = authDetails.getAuthParameters();\n    authParameters.USERNAME = this.username;\n    var clientMetaData = Object.keys(authDetails.getValidationData()).length !== 0 ? authDetails.getValidationData() : authDetails.getClientMetadata();\n    var jsonReq = {\n      AuthFlow: 'CUSTOM_AUTH',\n      ClientId: this.pool.getClientId(),\n      AuthParameters: authParameters,\n      ClientMetadata: clientMetaData\n    };\n\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('InitiateAuth', jsonReq, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      var challengeName = data.ChallengeName;\n      var challengeParameters = data.ChallengeParameters;\n\n      if (challengeName === 'CUSTOM_CHALLENGE') {\n        _this.Session = data.Session;\n        return callback.customChallenge(challengeParameters);\n      }\n\n      _this.signInUserSession = _this.getCognitoUserSession(data.AuthenticationResult);\n\n      _this.cacheTokens();\n\n      return callback.onSuccess(_this.signInUserSession);\n    });\n  }\n  /**\n   * This is used for authenticating the user.\n   * stuff\n   * @param {AuthenticationDetails} authDetails Contains the authentication data\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {newPasswordRequired} callback.newPasswordRequired new\n   *        password and any required attributes are required to continue\n   * @param {mfaRequired} callback.mfaRequired MFA code\n   *        required to continue.\n   * @param {customChallenge} callback.customChallenge Custom challenge\n   *        response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */\n  ;\n\n  _proto.authenticateUser = function authenticateUser(authDetails, callback) {\n    if (this.authenticationFlowType === 'USER_PASSWORD_AUTH') {\n      return this.authenticateUserPlainUsernamePassword(authDetails, callback);\n    } else if (this.authenticationFlowType === 'USER_SRP_AUTH' || this.authenticationFlowType === 'CUSTOM_AUTH') {\n      return this.authenticateUserDefaultAuth(authDetails, callback);\n    }\n\n    return callback.onFailure(new Error('Authentication flow type is invalid.'));\n  }\n  /**\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   * It calls the AuthenticationHelper for SRP related\n   * stuff\n   * @param {AuthenticationDetails} authDetails Contains the authentication data\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {newPasswordRequired} callback.newPasswordRequired new\n   *        password and any required attributes are required to continue\n   * @param {mfaRequired} callback.mfaRequired MFA code\n   *        required to continue.\n   * @param {customChallenge} callback.customChallenge Custom challenge\n   *        response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */\n  ;\n\n  _proto.authenticateUserDefaultAuth = function authenticateUserDefaultAuth(authDetails, callback) {\n    var _this2 = this;\n\n    var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolId().split('_')[1]);\n    var dateHelper = new DateHelper();\n    var serverBValue;\n    var salt;\n    var authParameters = {};\n\n    if (this.deviceKey != null) {\n      authParameters.DEVICE_KEY = this.deviceKey;\n    }\n\n    authParameters.USERNAME = this.username;\n    authenticationHelper.getLargeAValue(function (errOnAValue, aValue) {\n      // getLargeAValue callback start\n      if (errOnAValue) {\n        callback.onFailure(errOnAValue);\n      }\n\n      authParameters.SRP_A = aValue.toString(16);\n\n      if (_this2.authenticationFlowType === 'CUSTOM_AUTH') {\n        authParameters.CHALLENGE_NAME = 'SRP_A';\n      }\n\n      var clientMetaData = Object.keys(authDetails.getValidationData()).length !== 0 ? authDetails.getValidationData() : authDetails.getClientMetadata();\n      var jsonReq = {\n        AuthFlow: _this2.authenticationFlowType,\n        ClientId: _this2.pool.getClientId(),\n        AuthParameters: authParameters,\n        ClientMetadata: clientMetaData\n      };\n\n      if (_this2.getUserContextData(_this2.username)) {\n        jsonReq.UserContextData = _this2.getUserContextData(_this2.username);\n      }\n\n      _this2.client.request('InitiateAuth', jsonReq, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n\n        var challengeParameters = data.ChallengeParameters;\n        _this2.username = challengeParameters.USER_ID_FOR_SRP;\n        serverBValue = new BigInteger(challengeParameters.SRP_B, 16);\n        salt = new BigInteger(challengeParameters.SALT, 16);\n\n        _this2.getCachedDeviceKeyAndPassword();\n\n        authenticationHelper.getPasswordAuthenticationKey(_this2.username, authDetails.getPassword(), serverBValue, salt, function (errOnHkdf, hkdf) {\n          // getPasswordAuthenticationKey callback start\n          if (errOnHkdf) {\n            callback.onFailure(errOnHkdf);\n          }\n\n          var dateNow = dateHelper.getNowString();\n          var message = CryptoJS.lib.WordArray.create(Buffer.concat([Buffer.from(_this2.pool.getUserPoolId().split('_')[1], 'utf8'), Buffer.from(_this2.username, 'utf8'), Buffer.from(challengeParameters.SECRET_BLOCK, 'base64'), Buffer.from(dateNow, 'utf8')]));\n          var key = CryptoJS.lib.WordArray.create(hkdf);\n          var signatureString = Base64.stringify(HmacSHA256(message, key));\n          var challengeResponses = {};\n          challengeResponses.USERNAME = _this2.username;\n          challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;\n          challengeResponses.TIMESTAMP = dateNow;\n          challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;\n\n          if (_this2.deviceKey != null) {\n            challengeResponses.DEVICE_KEY = _this2.deviceKey;\n          }\n\n          var respondToAuthChallenge = function respondToAuthChallenge(challenge, challengeCallback) {\n            return _this2.client.request('RespondToAuthChallenge', challenge, function (errChallenge, dataChallenge) {\n              if (errChallenge && errChallenge.code === 'ResourceNotFoundException' && errChallenge.message.toLowerCase().indexOf('device') !== -1) {\n                challengeResponses.DEVICE_KEY = null;\n                _this2.deviceKey = null;\n                _this2.randomPassword = null;\n                _this2.deviceGroupKey = null;\n\n                _this2.clearCachedDeviceKeyAndPassword();\n\n                return respondToAuthChallenge(challenge, challengeCallback);\n              }\n\n              return challengeCallback(errChallenge, dataChallenge);\n            });\n          };\n\n          var jsonReqResp = {\n            ChallengeName: 'PASSWORD_VERIFIER',\n            ClientId: _this2.pool.getClientId(),\n            ChallengeResponses: challengeResponses,\n            Session: data.Session,\n            ClientMetadata: clientMetaData\n          };\n\n          if (_this2.getUserContextData()) {\n            jsonReqResp.UserContextData = _this2.getUserContextData();\n          }\n\n          respondToAuthChallenge(jsonReqResp, function (errAuthenticate, dataAuthenticate) {\n            if (errAuthenticate) {\n              return callback.onFailure(errAuthenticate);\n            }\n\n            return _this2.authenticateUserInternal(dataAuthenticate, authenticationHelper, callback);\n          });\n          return undefined; // getPasswordAuthenticationKey callback end\n        });\n        return undefined;\n      }); // getLargeAValue callback end\n\n    });\n  }\n  /**\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   * @param {AuthenticationDetails} authDetails Contains the authentication data.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {mfaRequired} callback.mfaRequired MFA code\n   *        required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */\n  ;\n\n  _proto.authenticateUserPlainUsernamePassword = function authenticateUserPlainUsernamePassword(authDetails, callback) {\n    var _this3 = this;\n\n    var authParameters = {};\n    authParameters.USERNAME = this.username;\n    authParameters.PASSWORD = authDetails.getPassword();\n\n    if (!authParameters.PASSWORD) {\n      callback.onFailure(new Error('PASSWORD parameter is required'));\n      return;\n    }\n\n    var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolId().split('_')[1]);\n    this.getCachedDeviceKeyAndPassword();\n\n    if (this.deviceKey != null) {\n      authParameters.DEVICE_KEY = this.deviceKey;\n    }\n\n    var clientMetaData = Object.keys(authDetails.getValidationData()).length !== 0 ? authDetails.getValidationData() : authDetails.getClientMetadata();\n    var jsonReq = {\n      AuthFlow: 'USER_PASSWORD_AUTH',\n      ClientId: this.pool.getClientId(),\n      AuthParameters: authParameters,\n      ClientMetadata: clientMetaData\n    };\n\n    if (this.getUserContextData(this.username)) {\n      jsonReq.UserContextData = this.getUserContextData(this.username);\n    } // USER_PASSWORD_AUTH happens in a single round-trip: client sends userName and password,\n    // Cognito UserPools verifies password and returns tokens.\n\n\n    this.client.request('InitiateAuth', jsonReq, function (err, authResult) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      return _this3.authenticateUserInternal(authResult, authenticationHelper, callback);\n    });\n  }\n  /**\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   * @param {object} dataAuthenticate authentication data\n   * @param {object} authenticationHelper helper created\n   * @param {callback} callback passed on from caller\n   * @returns {void}\n   */\n  ;\n\n  _proto.authenticateUserInternal = function authenticateUserInternal(dataAuthenticate, authenticationHelper, callback) {\n    var _this4 = this;\n\n    var challengeName = dataAuthenticate.ChallengeName;\n    var challengeParameters = dataAuthenticate.ChallengeParameters;\n\n    if (challengeName === 'SMS_MFA') {\n      this.Session = dataAuthenticate.Session;\n      return callback.mfaRequired(challengeName, challengeParameters);\n    }\n\n    if (challengeName === 'SELECT_MFA_TYPE') {\n      this.Session = dataAuthenticate.Session;\n      return callback.selectMFAType(challengeName, challengeParameters);\n    }\n\n    if (challengeName === 'MFA_SETUP') {\n      this.Session = dataAuthenticate.Session;\n      return callback.mfaSetup(challengeName, challengeParameters);\n    }\n\n    if (challengeName === 'SOFTWARE_TOKEN_MFA') {\n      this.Session = dataAuthenticate.Session;\n      return callback.totpRequired(challengeName, challengeParameters);\n    }\n\n    if (challengeName === 'CUSTOM_CHALLENGE') {\n      this.Session = dataAuthenticate.Session;\n      return callback.customChallenge(challengeParameters);\n    }\n\n    if (challengeName === 'NEW_PASSWORD_REQUIRED') {\n      this.Session = dataAuthenticate.Session;\n      var userAttributes = null;\n      var rawRequiredAttributes = null;\n      var requiredAttributes = [];\n      var userAttributesPrefix = authenticationHelper.getNewPasswordRequiredChallengeUserAttributePrefix();\n\n      if (challengeParameters) {\n        userAttributes = JSON.parse(dataAuthenticate.ChallengeParameters.userAttributes);\n        rawRequiredAttributes = JSON.parse(dataAuthenticate.ChallengeParameters.requiredAttributes);\n      }\n\n      if (rawRequiredAttributes) {\n        for (var i = 0; i < rawRequiredAttributes.length; i++) {\n          requiredAttributes[i] = rawRequiredAttributes[i].substr(userAttributesPrefix.length);\n        }\n      }\n\n      return callback.newPasswordRequired(userAttributes, requiredAttributes);\n    }\n\n    if (challengeName === 'DEVICE_SRP_AUTH') {\n      this.getDeviceResponse(callback);\n      return undefined;\n    }\n\n    this.signInUserSession = this.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n    this.challengeName = challengeName;\n    this.cacheTokens();\n    var newDeviceMetadata = dataAuthenticate.AuthenticationResult.NewDeviceMetadata;\n\n    if (newDeviceMetadata == null) {\n      return callback.onSuccess(this.signInUserSession);\n    }\n\n    authenticationHelper.generateHashDevice(dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey, dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey, function (errGenHash) {\n      if (errGenHash) {\n        return callback.onFailure(errGenHash);\n      }\n\n      var deviceSecretVerifierConfig = {\n        Salt: Buffer.from(authenticationHelper.getSaltDevices(), 'hex').toString('base64'),\n        PasswordVerifier: Buffer.from(authenticationHelper.getVerifierDevices(), 'hex').toString('base64')\n      };\n      _this4.verifierDevices = deviceSecretVerifierConfig.PasswordVerifier;\n      _this4.deviceGroupKey = newDeviceMetadata.DeviceGroupKey;\n      _this4.randomPassword = authenticationHelper.getRandomPassword();\n\n      _this4.client.request('ConfirmDevice', {\n        DeviceKey: newDeviceMetadata.DeviceKey,\n        AccessToken: _this4.signInUserSession.getAccessToken().getJwtToken(),\n        DeviceSecretVerifierConfig: deviceSecretVerifierConfig,\n        DeviceName: navigator.userAgent\n      }, function (errConfirm, dataConfirm) {\n        if (errConfirm) {\n          return callback.onFailure(errConfirm);\n        }\n\n        _this4.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;\n\n        _this4.cacheDeviceKeyAndPassword();\n\n        if (dataConfirm.UserConfirmationNecessary === true) {\n          return callback.onSuccess(_this4.signInUserSession, dataConfirm.UserConfirmationNecessary);\n        }\n\n        return callback.onSuccess(_this4.signInUserSession);\n      });\n\n      return undefined;\n    });\n    return undefined;\n  }\n  /**\n   * This method is user to complete the NEW_PASSWORD_REQUIRED challenge.\n   * Pass the new password with any new user attributes to be updated.\n   * User attribute keys must be of format userAttributes.<attribute_name>.\n   * @param {string} newPassword new password for this user\n   * @param {object} requiredAttributeData map with values for all required attributes\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {mfaRequired} callback.mfaRequired MFA code required to continue.\n   * @param {customChallenge} callback.customChallenge Custom challenge\n   *         response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n  ;\n\n  _proto.completeNewPasswordChallenge = function completeNewPasswordChallenge(newPassword, requiredAttributeData, callback, clientMetadata) {\n    var _this5 = this;\n\n    if (!newPassword) {\n      return callback.onFailure(new Error('New password is required.'));\n    }\n\n    var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolId().split('_')[1]);\n    var userAttributesPrefix = authenticationHelper.getNewPasswordRequiredChallengeUserAttributePrefix();\n    var finalUserAttributes = {};\n\n    if (requiredAttributeData) {\n      Object.keys(requiredAttributeData).forEach(function (key) {\n        finalUserAttributes[userAttributesPrefix + key] = requiredAttributeData[key];\n      });\n    }\n\n    finalUserAttributes.NEW_PASSWORD = newPassword;\n    finalUserAttributes.USERNAME = this.username;\n    var jsonReq = {\n      ChallengeName: 'NEW_PASSWORD_REQUIRED',\n      ClientId: this.pool.getClientId(),\n      ChallengeResponses: finalUserAttributes,\n      Session: this.Session,\n      ClientMetadata: clientMetadata\n    };\n\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('RespondToAuthChallenge', jsonReq, function (errAuthenticate, dataAuthenticate) {\n      if (errAuthenticate) {\n        return callback.onFailure(errAuthenticate);\n      }\n\n      return _this5.authenticateUserInternal(dataAuthenticate, authenticationHelper, callback);\n    });\n    return undefined;\n  }\n  /**\n   * This is used to get a session using device authentication. It is called at the end of user\n   * authentication\n   *\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   * @private\n   */\n  ;\n\n  _proto.getDeviceResponse = function getDeviceResponse(callback, clientMetadata) {\n    var _this6 = this;\n\n    var authenticationHelper = new AuthenticationHelper(this.deviceGroupKey);\n    var dateHelper = new DateHelper();\n    var authParameters = {};\n    authParameters.USERNAME = this.username;\n    authParameters.DEVICE_KEY = this.deviceKey;\n    authenticationHelper.getLargeAValue(function (errAValue, aValue) {\n      // getLargeAValue callback start\n      if (errAValue) {\n        callback.onFailure(errAValue);\n      }\n\n      authParameters.SRP_A = aValue.toString(16);\n      var jsonReq = {\n        ChallengeName: 'DEVICE_SRP_AUTH',\n        ClientId: _this6.pool.getClientId(),\n        ChallengeResponses: authParameters,\n        ClientMetadata: clientMetadata\n      };\n\n      if (_this6.getUserContextData()) {\n        jsonReq.UserContextData = _this6.getUserContextData();\n      }\n\n      _this6.client.request('RespondToAuthChallenge', jsonReq, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n\n        var challengeParameters = data.ChallengeParameters;\n        var serverBValue = new BigInteger(challengeParameters.SRP_B, 16);\n        var salt = new BigInteger(challengeParameters.SALT, 16);\n        authenticationHelper.getPasswordAuthenticationKey(_this6.deviceKey, _this6.randomPassword, serverBValue, salt, function (errHkdf, hkdf) {\n          // getPasswordAuthenticationKey callback start\n          if (errHkdf) {\n            return callback.onFailure(errHkdf);\n          }\n\n          var dateNow = dateHelper.getNowString();\n          var message = CryptoJS.lib.WordArray.create(Buffer.concat([Buffer.from(_this6.deviceGroupKey, 'utf8'), Buffer.from(_this6.deviceKey, 'utf8'), Buffer.from(challengeParameters.SECRET_BLOCK, 'base64'), Buffer.from(dateNow, 'utf8')]));\n          var key = CryptoJS.lib.WordArray.create(hkdf);\n          var signatureString = Base64.stringify(HmacSHA256(message, key));\n          var challengeResponses = {};\n          challengeResponses.USERNAME = _this6.username;\n          challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;\n          challengeResponses.TIMESTAMP = dateNow;\n          challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;\n          challengeResponses.DEVICE_KEY = _this6.deviceKey;\n          var jsonReqResp = {\n            ChallengeName: 'DEVICE_PASSWORD_VERIFIER',\n            ClientId: _this6.pool.getClientId(),\n            ChallengeResponses: challengeResponses,\n            Session: data.Session\n          };\n\n          if (_this6.getUserContextData()) {\n            jsonReqResp.UserContextData = _this6.getUserContextData();\n          }\n\n          _this6.client.request('RespondToAuthChallenge', jsonReqResp, function (errAuthenticate, dataAuthenticate) {\n            if (errAuthenticate) {\n              return callback.onFailure(errAuthenticate);\n            }\n\n            _this6.signInUserSession = _this6.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n\n            _this6.cacheTokens();\n\n            return callback.onSuccess(_this6.signInUserSession);\n          });\n\n          return undefined; // getPasswordAuthenticationKey callback end\n        });\n        return undefined;\n      }); // getLargeAValue callback end\n\n    });\n  }\n  /**\n   * This is used for a certain user to confirm the registration by using a confirmation code\n   * @param {string} confirmationCode Code entered by user.\n   * @param {bool} forceAliasCreation Allow migrating from an existing email / phone number.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n  ;\n\n  _proto.confirmRegistration = function confirmRegistration(confirmationCode, forceAliasCreation, callback, clientMetadata) {\n    var jsonReq = {\n      ClientId: this.pool.getClientId(),\n      ConfirmationCode: confirmationCode,\n      Username: this.username,\n      ForceAliasCreation: forceAliasCreation,\n      ClientMetadata: clientMetadata\n    };\n\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('ConfirmSignUp', jsonReq, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, 'SUCCESS');\n    });\n  }\n  /**\n   * This is used by the user once he has the responses to a custom challenge\n   * @param {string} answerChallenge The custom challenge answer.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {customChallenge} callback.customChallenge\n   *    Custom challenge response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n  ;\n\n  _proto.sendCustomChallengeAnswer = function sendCustomChallengeAnswer(answerChallenge, callback, clientMetadata) {\n    var _this7 = this;\n\n    var challengeResponses = {};\n    challengeResponses.USERNAME = this.username;\n    challengeResponses.ANSWER = answerChallenge;\n    var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolId().split('_')[1]);\n    this.getCachedDeviceKeyAndPassword();\n\n    if (this.deviceKey != null) {\n      challengeResponses.DEVICE_KEY = this.deviceKey;\n    }\n\n    var jsonReq = {\n      ChallengeName: 'CUSTOM_CHALLENGE',\n      ChallengeResponses: challengeResponses,\n      ClientId: this.pool.getClientId(),\n      Session: this.Session,\n      ClientMetadata: clientMetadata\n    };\n\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('RespondToAuthChallenge', jsonReq, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      return _this7.authenticateUserInternal(data, authenticationHelper, callback);\n    });\n  }\n  /**\n   * This is used by the user once he has an MFA code\n   * @param {string} confirmationCode The MFA code entered by the user.\n   * @param {object} callback Result callback map.\n   * @param {string} mfaType The mfa we are replying to.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n  ;\n\n  _proto.sendMFACode = function sendMFACode(confirmationCode, callback, mfaType, clientMetadata) {\n    var _this8 = this;\n\n    var challengeResponses = {};\n    challengeResponses.USERNAME = this.username;\n    challengeResponses.SMS_MFA_CODE = confirmationCode;\n    var mfaTypeSelection = mfaType || 'SMS_MFA';\n\n    if (mfaTypeSelection === 'SOFTWARE_TOKEN_MFA') {\n      challengeResponses.SOFTWARE_TOKEN_MFA_CODE = confirmationCode;\n    }\n\n    if (this.deviceKey != null) {\n      challengeResponses.DEVICE_KEY = this.deviceKey;\n    }\n\n    var jsonReq = {\n      ChallengeName: mfaTypeSelection,\n      ChallengeResponses: challengeResponses,\n      ClientId: this.pool.getClientId(),\n      Session: this.Session,\n      ClientMetadata: clientMetadata\n    };\n\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('RespondToAuthChallenge', jsonReq, function (err, dataAuthenticate) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      var challengeName = dataAuthenticate.ChallengeName;\n\n      if (challengeName === 'DEVICE_SRP_AUTH') {\n        _this8.getDeviceResponse(callback);\n\n        return undefined;\n      }\n\n      _this8.signInUserSession = _this8.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n\n      _this8.cacheTokens();\n\n      if (dataAuthenticate.AuthenticationResult.NewDeviceMetadata == null) {\n        return callback.onSuccess(_this8.signInUserSession);\n      }\n\n      var authenticationHelper = new AuthenticationHelper(_this8.pool.getUserPoolId().split('_')[1]);\n      authenticationHelper.generateHashDevice(dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey, dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey, function (errGenHash) {\n        if (errGenHash) {\n          return callback.onFailure(errGenHash);\n        }\n\n        var deviceSecretVerifierConfig = {\n          Salt: Buffer.from(authenticationHelper.getSaltDevices(), 'hex').toString('base64'),\n          PasswordVerifier: Buffer.from(authenticationHelper.getVerifierDevices(), 'hex').toString('base64')\n        };\n        _this8.verifierDevices = deviceSecretVerifierConfig.PasswordVerifier;\n        _this8.deviceGroupKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey;\n        _this8.randomPassword = authenticationHelper.getRandomPassword();\n\n        _this8.client.request('ConfirmDevice', {\n          DeviceKey: dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey,\n          AccessToken: _this8.signInUserSession.getAccessToken().getJwtToken(),\n          DeviceSecretVerifierConfig: deviceSecretVerifierConfig,\n          DeviceName: navigator.userAgent\n        }, function (errConfirm, dataConfirm) {\n          if (errConfirm) {\n            return callback.onFailure(errConfirm);\n          }\n\n          _this8.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;\n\n          _this8.cacheDeviceKeyAndPassword();\n\n          if (dataConfirm.UserConfirmationNecessary === true) {\n            return callback.onSuccess(_this8.signInUserSession, dataConfirm.UserConfirmationNecessary);\n          }\n\n          return callback.onSuccess(_this8.signInUserSession);\n        });\n\n        return undefined;\n      });\n      return undefined;\n    });\n  }\n  /**\n   * This is used by an authenticated user to change the current password\n   * @param {string} oldUserPassword The current password.\n   * @param {string} newUserPassword The requested new password.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n  ;\n\n  _proto.changePassword = function changePassword(oldUserPassword, newUserPassword, callback, clientMetadata) {\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.request('ChangePassword', {\n      PreviousPassword: oldUserPassword,\n      ProposedPassword: newUserPassword,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      ClientMetadata: clientMetadata\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * This is used by an authenticated user to enable MFA for itself\n   * @deprecated\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  ;\n\n  _proto.enableMFA = function enableMFA(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    var mfaOptions = [];\n    var mfaEnabled = {\n      DeliveryMedium: 'SMS',\n      AttributeName: 'phone_number'\n    };\n    mfaOptions.push(mfaEnabled);\n    this.client.request('SetUserSettings', {\n      MFAOptions: mfaOptions,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * This is used by an authenticated user to enable MFA for itself\n   * @param {IMfaSettings} smsMfaSettings the sms mfa settings\n   * @param {IMFASettings} softwareTokenMfaSettings the software token mfa settings\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  ;\n\n  _proto.setUserMfaPreference = function setUserMfaPreference(smsMfaSettings, softwareTokenMfaSettings, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.request('SetUserMFAPreference', {\n      SMSMfaSettings: smsMfaSettings,\n      SoftwareTokenMfaSettings: softwareTokenMfaSettings,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * This is used by an authenticated user to disable MFA for itself\n   * @deprecated\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  ;\n\n  _proto.disableMFA = function disableMFA(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    var mfaOptions = [];\n    this.client.request('SetUserSettings', {\n      MFAOptions: mfaOptions,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * This is used by an authenticated user to delete itself\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n  ;\n\n  _proto.deleteUser = function deleteUser(callback, clientMetadata) {\n    var _this9 = this;\n\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.request('DeleteUser', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      ClientMetadata: clientMetadata\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      _this9.clearCachedUser();\n\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * @typedef {CognitoUserAttribute | { Name:string, Value:string }} AttributeArg\n   */\n\n  /**\n   * This is used by an authenticated user to change a list of attributes\n   * @param {AttributeArg[]} attributes A list of the new user attributes.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n  ;\n\n  _proto.updateAttributes = function updateAttributes(attributes, callback, clientMetadata) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.request('UpdateUserAttributes', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      UserAttributes: attributes,\n      ClientMetadata: clientMetadata\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * This is used by an authenticated user to get a list of attributes\n   * @param {nodeCallback<CognitoUserAttribute[]>} callback Called on success or error.\n   * @returns {void}\n   */\n  ;\n\n  _proto.getUserAttributes = function getUserAttributes(callback) {\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.request('GetUser', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err, userData) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      var attributeList = [];\n\n      for (var i = 0; i < userData.UserAttributes.length; i++) {\n        var attribute = {\n          Name: userData.UserAttributes[i].Name,\n          Value: userData.UserAttributes[i].Value\n        };\n        var userAttribute = new CognitoUserAttribute(attribute);\n        attributeList.push(userAttribute);\n      }\n\n      return callback(null, attributeList);\n    });\n    return undefined;\n  }\n  /**\n   * This is used by an authenticated user to get the MFAOptions\n   * @param {nodeCallback<MFAOptions>} callback Called on success or error.\n   * @returns {void}\n   */\n  ;\n\n  _proto.getMFAOptions = function getMFAOptions(callback) {\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.request('GetUser', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err, userData) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, userData.MFAOptions);\n    });\n    return undefined;\n  }\n  /**\n   * This is used by an authenticated users to get the userData\n   * @param {nodeCallback<UserData>} callback Called on success or error.\n   * @returns {void}\n   */\n  ;\n\n  _proto.getUserData = function getUserData(callback, params) {\n    var _this10 = this;\n\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      this.clearCachedUserData();\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    var bypassCache = params ? params.bypassCache : false;\n    var userData = this.storage.getItem(this.userDataKey); // get the cached user data\n\n    if (!userData || bypassCache) {\n      this.client.request('GetUser', {\n        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n      }, function (err, latestUserData) {\n        if (err) {\n          return callback(err, null);\n        }\n\n        _this10.cacheUserData(latestUserData);\n\n        var refresh = _this10.signInUserSession.getRefreshToken();\n\n        if (refresh && refresh.getToken()) {\n          _this10.refreshSession(refresh, function (refreshError, data) {\n            if (refreshError) {\n              return callback(refreshError, null);\n            }\n\n            return callback(null, latestUserData);\n          });\n        } else {\n          return callback(null, latestUserData);\n        }\n      });\n    } else {\n      try {\n        return callback(null, JSON.parse(userData));\n      } catch (err) {\n        this.clearCachedUserData();\n        return callback(err, null);\n      }\n    }\n\n    return undefined;\n  }\n  /**\n   * This is used by an authenticated user to delete a list of attributes\n   * @param {string[]} attributeList Names of the attributes to delete.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  ;\n\n  _proto.deleteAttributes = function deleteAttributes(attributeList, callback) {\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.request('DeleteUserAttributes', {\n      UserAttributeNames: attributeList,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * This is used by a user to resend a confirmation code\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n  ;\n\n  _proto.resendConfirmationCode = function resendConfirmationCode(callback, clientMetadata) {\n    var jsonReq = {\n      ClientId: this.pool.getClientId(),\n      Username: this.username,\n      ClientMetadata: clientMetadata\n    };\n    this.client.request('ResendConfirmationCode', jsonReq, function (err, result) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, result);\n    });\n  }\n  /**\n   * This is used to get a session, either from the session object\n   * or from  the local storage, or by using a refresh token\n   *\n   * @param {nodeCallback<CognitoUserSession>} callback Called on success or error.\n   * @returns {void}\n   */\n  ;\n\n  _proto.getSession = function getSession(callback) {\n    if (this.username == null) {\n      return callback(new Error('Username is null. Cannot retrieve a new session'), null);\n    }\n\n    if (this.signInUserSession != null && this.signInUserSession.isValid()) {\n      return callback(null, this.signInUserSession);\n    }\n\n    var keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId() + \".\" + this.username;\n    var idTokenKey = keyPrefix + \".idToken\";\n    var accessTokenKey = keyPrefix + \".accessToken\";\n    var refreshTokenKey = keyPrefix + \".refreshToken\";\n    var clockDriftKey = keyPrefix + \".clockDrift\";\n\n    if (this.storage.getItem(idTokenKey)) {\n      var idToken = new CognitoIdToken({\n        IdToken: this.storage.getItem(idTokenKey)\n      });\n      var accessToken = new CognitoAccessToken({\n        AccessToken: this.storage.getItem(accessTokenKey)\n      });\n      var refreshToken = new CognitoRefreshToken({\n        RefreshToken: this.storage.getItem(refreshTokenKey)\n      });\n      var clockDrift = parseInt(this.storage.getItem(clockDriftKey), 0) || 0;\n      var sessionData = {\n        IdToken: idToken,\n        AccessToken: accessToken,\n        RefreshToken: refreshToken,\n        ClockDrift: clockDrift\n      };\n      var cachedSession = new CognitoUserSession(sessionData);\n\n      if (cachedSession.isValid()) {\n        this.signInUserSession = cachedSession;\n        return callback(null, this.signInUserSession);\n      }\n\n      if (!refreshToken.getToken()) {\n        return callback(new Error('Cannot retrieve a new session. Please authenticate.'), null);\n      }\n\n      this.refreshSession(refreshToken, callback);\n    } else {\n      callback(new Error('Local storage is missing an ID Token, Please authenticate'), null);\n    }\n\n    return undefined;\n  }\n  /**\n   * This uses the refreshToken to retrieve a new session\n   * @param {CognitoRefreshToken} refreshToken A previous session's refresh token.\n   * @param {nodeCallback<CognitoUserSession>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n  ;\n\n  _proto.refreshSession = function refreshSession(refreshToken, callback, clientMetadata) {\n    var _this11 = this;\n\n    var authParameters = {};\n    authParameters.REFRESH_TOKEN = refreshToken.getToken();\n    var keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId();\n    var lastUserKey = keyPrefix + \".LastAuthUser\";\n\n    if (this.storage.getItem(lastUserKey)) {\n      this.username = this.storage.getItem(lastUserKey);\n      var deviceKeyKey = keyPrefix + \".\" + this.username + \".deviceKey\";\n      this.deviceKey = this.storage.getItem(deviceKeyKey);\n      authParameters.DEVICE_KEY = this.deviceKey;\n    }\n\n    var jsonReq = {\n      ClientId: this.pool.getClientId(),\n      AuthFlow: 'REFRESH_TOKEN_AUTH',\n      AuthParameters: authParameters,\n      ClientMetadata: clientMetadata\n    };\n\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('InitiateAuth', jsonReq, function (err, authResult) {\n      if (err) {\n        if (err.code === 'NotAuthorizedException') {\n          _this11.clearCachedUser();\n        }\n\n        return callback(err, null);\n      }\n\n      if (authResult) {\n        var authenticationResult = authResult.AuthenticationResult;\n\n        if (!Object.prototype.hasOwnProperty.call(authenticationResult, 'RefreshToken')) {\n          authenticationResult.RefreshToken = refreshToken.getToken();\n        }\n\n        _this11.signInUserSession = _this11.getCognitoUserSession(authenticationResult);\n\n        _this11.cacheTokens();\n\n        return callback(null, _this11.signInUserSession);\n      }\n\n      return undefined;\n    });\n  }\n  /**\n   * This is used to save the session tokens to local storage\n   * @returns {void}\n   */\n  ;\n\n  _proto.cacheTokens = function cacheTokens() {\n    var keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId();\n    var idTokenKey = keyPrefix + \".\" + this.username + \".idToken\";\n    var accessTokenKey = keyPrefix + \".\" + this.username + \".accessToken\";\n    var refreshTokenKey = keyPrefix + \".\" + this.username + \".refreshToken\";\n    var clockDriftKey = keyPrefix + \".\" + this.username + \".clockDrift\";\n    var lastUserKey = keyPrefix + \".LastAuthUser\";\n    this.storage.setItem(idTokenKey, this.signInUserSession.getIdToken().getJwtToken());\n    this.storage.setItem(accessTokenKey, this.signInUserSession.getAccessToken().getJwtToken());\n    this.storage.setItem(refreshTokenKey, this.signInUserSession.getRefreshToken().getToken());\n    this.storage.setItem(clockDriftKey, \"\" + this.signInUserSession.getClockDrift());\n    this.storage.setItem(lastUserKey, this.username);\n  }\n  /**\n   * This is to cache user data\n   */\n  ;\n\n  _proto.cacheUserData = function cacheUserData(userData) {\n    this.storage.setItem(this.userDataKey, JSON.stringify(userData));\n  }\n  /**\n   * This is to remove cached user data\n   */\n  ;\n\n  _proto.clearCachedUserData = function clearCachedUserData() {\n    this.storage.removeItem(this.userDataKey);\n  };\n\n  _proto.clearCachedUser = function clearCachedUser() {\n    this.clearCachedTokens();\n    this.clearCachedUserData();\n  }\n  /**\n   * This is used to cache the device key and device group and device password\n   * @returns {void}\n   */\n  ;\n\n  _proto.cacheDeviceKeyAndPassword = function cacheDeviceKeyAndPassword() {\n    var keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId() + \".\" + this.username;\n    var deviceKeyKey = keyPrefix + \".deviceKey\";\n    var randomPasswordKey = keyPrefix + \".randomPasswordKey\";\n    var deviceGroupKeyKey = keyPrefix + \".deviceGroupKey\";\n    this.storage.setItem(deviceKeyKey, this.deviceKey);\n    this.storage.setItem(randomPasswordKey, this.randomPassword);\n    this.storage.setItem(deviceGroupKeyKey, this.deviceGroupKey);\n  }\n  /**\n   * This is used to get current device key and device group and device password\n   * @returns {void}\n   */\n  ;\n\n  _proto.getCachedDeviceKeyAndPassword = function getCachedDeviceKeyAndPassword() {\n    var keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId() + \".\" + this.username;\n    var deviceKeyKey = keyPrefix + \".deviceKey\";\n    var randomPasswordKey = keyPrefix + \".randomPasswordKey\";\n    var deviceGroupKeyKey = keyPrefix + \".deviceGroupKey\";\n\n    if (this.storage.getItem(deviceKeyKey)) {\n      this.deviceKey = this.storage.getItem(deviceKeyKey);\n      this.randomPassword = this.storage.getItem(randomPasswordKey);\n      this.deviceGroupKey = this.storage.getItem(deviceGroupKeyKey);\n    }\n  }\n  /**\n   * This is used to clear the device key info from local storage\n   * @returns {void}\n   */\n  ;\n\n  _proto.clearCachedDeviceKeyAndPassword = function clearCachedDeviceKeyAndPassword() {\n    var keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId() + \".\" + this.username;\n    var deviceKeyKey = keyPrefix + \".deviceKey\";\n    var randomPasswordKey = keyPrefix + \".randomPasswordKey\";\n    var deviceGroupKeyKey = keyPrefix + \".deviceGroupKey\";\n    this.storage.removeItem(deviceKeyKey);\n    this.storage.removeItem(randomPasswordKey);\n    this.storage.removeItem(deviceGroupKeyKey);\n  }\n  /**\n   * This is used to clear the session tokens from local storage\n   * @returns {void}\n   */\n  ;\n\n  _proto.clearCachedTokens = function clearCachedTokens() {\n    var keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId();\n    var idTokenKey = keyPrefix + \".\" + this.username + \".idToken\";\n    var accessTokenKey = keyPrefix + \".\" + this.username + \".accessToken\";\n    var refreshTokenKey = keyPrefix + \".\" + this.username + \".refreshToken\";\n    var lastUserKey = keyPrefix + \".LastAuthUser\";\n    var clockDriftKey = keyPrefix + \".\" + this.username + \".clockDrift\";\n    this.storage.removeItem(idTokenKey);\n    this.storage.removeItem(accessTokenKey);\n    this.storage.removeItem(refreshTokenKey);\n    this.storage.removeItem(lastUserKey);\n    this.storage.removeItem(clockDriftKey);\n  }\n  /**\n   * This is used to build a user session from tokens retrieved in the authentication result\n   * @param {object} authResult Successful auth response from server.\n   * @returns {CognitoUserSession} The new user session.\n   * @private\n   */\n  ;\n\n  _proto.getCognitoUserSession = function getCognitoUserSession(authResult) {\n    var idToken = new CognitoIdToken(authResult);\n    var accessToken = new CognitoAccessToken(authResult);\n    var refreshToken = new CognitoRefreshToken(authResult);\n    var sessionData = {\n      IdToken: idToken,\n      AccessToken: accessToken,\n      RefreshToken: refreshToken\n    };\n    return new CognitoUserSession(sessionData);\n  }\n  /**\n   * This is used to initiate a forgot password request\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {inputVerificationCode?} callback.inputVerificationCode\n   *    Optional callback raised instead of onSuccess with response data.\n   * @param {onSuccess} callback.onSuccess Called on success.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n  ;\n\n  _proto.forgotPassword = function forgotPassword(callback, clientMetadata) {\n    var jsonReq = {\n      ClientId: this.pool.getClientId(),\n      Username: this.username,\n      ClientMetadata: clientMetadata\n    };\n\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('ForgotPassword', jsonReq, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      if (typeof callback.inputVerificationCode === 'function') {\n        return callback.inputVerificationCode(data);\n      }\n\n      return callback.onSuccess(data);\n    });\n  }\n  /**\n   * This is used to confirm a new password using a confirmationCode\n   * @param {string} confirmationCode Code entered by user.\n   * @param {string} newPassword Confirm new password.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<void>} callback.onSuccess Called on success.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n  ;\n\n  _proto.confirmPassword = function confirmPassword(confirmationCode, newPassword, callback, clientMetadata) {\n    var jsonReq = {\n      ClientId: this.pool.getClientId(),\n      Username: this.username,\n      ConfirmationCode: confirmationCode,\n      Password: newPassword,\n      ClientMetadata: clientMetadata\n    };\n\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('ConfirmForgotPassword', jsonReq, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      return callback.onSuccess();\n    });\n  }\n  /**\n   * This is used to initiate an attribute confirmation request\n   * @param {string} attributeName User attribute that needs confirmation.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {inputVerificationCode} callback.inputVerificationCode Called on success.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n  ;\n\n  _proto.getAttributeVerificationCode = function getAttributeVerificationCode(attributeName, callback, clientMetadata) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.request('GetUserAttributeVerificationCode', {\n      AttributeName: attributeName,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      ClientMetadata: clientMetadata\n    }, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      if (typeof callback.inputVerificationCode === 'function') {\n        return callback.inputVerificationCode(data);\n      }\n\n      return callback.onSuccess();\n    });\n    return undefined;\n  }\n  /**\n   * This is used to confirm an attribute using a confirmation code\n   * @param {string} attributeName Attribute being confirmed.\n   * @param {string} confirmationCode Code entered by user.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n  ;\n\n  _proto.verifyAttribute = function verifyAttribute(attributeName, confirmationCode, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.request('VerifyUserAttribute', {\n      AttributeName: attributeName,\n      Code: confirmationCode,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * This is used to get the device information using the current device key\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<*>} callback.onSuccess Called on success with device data.\n   * @returns {void}\n   */\n  ;\n\n  _proto.getDevice = function getDevice(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.request('GetDevice', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceKey: this.deviceKey\n    }, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      return callback.onSuccess(data);\n    });\n    return undefined;\n  }\n  /**\n   * This is used to forget a specific device\n   * @param {string} deviceKey Device key.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n  ;\n\n  _proto.forgetSpecificDevice = function forgetSpecificDevice(deviceKey, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.request('ForgetDevice', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceKey: deviceKey\n    }, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * This is used to forget the current device\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n  ;\n\n  _proto.forgetDevice = function forgetDevice(callback) {\n    var _this12 = this;\n\n    this.forgetSpecificDevice(this.deviceKey, {\n      onFailure: callback.onFailure,\n      onSuccess: function onSuccess(result) {\n        _this12.deviceKey = null;\n        _this12.deviceGroupKey = null;\n        _this12.randomPassword = null;\n\n        _this12.clearCachedDeviceKeyAndPassword();\n\n        return callback.onSuccess(result);\n      }\n    });\n  }\n  /**\n   * This is used to set the device status as remembered\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n  ;\n\n  _proto.setDeviceStatusRemembered = function setDeviceStatusRemembered(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.request('UpdateDeviceStatus', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceKey: this.deviceKey,\n      DeviceRememberedStatus: 'remembered'\n    }, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * This is used to set the device status as not remembered\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n  ;\n\n  _proto.setDeviceStatusNotRemembered = function setDeviceStatusNotRemembered(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.request('UpdateDeviceStatus', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceKey: this.deviceKey,\n      DeviceRememberedStatus: 'not_remembered'\n    }, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * This is used to list all devices for a user\n   *\n   * @param {int} limit the number of devices returned in a call\n   * @param {string} paginationToken the pagination token in case any was returned before\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<*>} callback.onSuccess Called on success with device list.\n   * @returns {void}\n   */\n  ;\n\n  _proto.listDevices = function listDevices(limit, paginationToken, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.request('ListDevices', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      Limit: limit,\n      PaginationToken: paginationToken\n    }, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      return callback.onSuccess(data);\n    });\n    return undefined;\n  }\n  /**\n   * This is used to globally revoke all tokens issued to a user\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n  ;\n\n  _proto.globalSignOut = function globalSignOut(callback) {\n    var _this13 = this;\n\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.request('GlobalSignOut', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      _this13.clearCachedUser();\n\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * This is used for the user to signOut of the application and clear the cached tokens.\n   * @returns {void}\n   */\n  ;\n\n  _proto.signOut = function signOut() {\n    this.signInUserSession = null;\n    this.clearCachedUser();\n  }\n  /**\n   * This is used by a user trying to select a given MFA\n   * @param {string} answerChallenge the mfa the user wants\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  ;\n\n  _proto.sendMFASelectionAnswer = function sendMFASelectionAnswer(answerChallenge, callback) {\n    var _this14 = this;\n\n    var challengeResponses = {};\n    challengeResponses.USERNAME = this.username;\n    challengeResponses.ANSWER = answerChallenge;\n    var jsonReq = {\n      ChallengeName: 'SELECT_MFA_TYPE',\n      ChallengeResponses: challengeResponses,\n      ClientId: this.pool.getClientId(),\n      Session: this.Session\n    };\n\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('RespondToAuthChallenge', jsonReq, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      _this14.Session = data.Session;\n\n      if (answerChallenge === 'SMS_MFA') {\n        return callback.mfaRequired(data.challengeName, data.challengeParameters);\n      }\n\n      if (answerChallenge === 'SOFTWARE_TOKEN_MFA') {\n        return callback.totpRequired(data.challengeName, data.challengeParameters);\n      }\n\n      return undefined;\n    });\n  }\n  /**\n   * This returns the user context data for advanced security feature.\n   * @returns {void}\n   */\n  ;\n\n  _proto.getUserContextData = function getUserContextData() {\n    var pool = this.pool;\n    return pool.getUserContextData(this.username);\n  }\n  /**\n   * This is used by an authenticated or a user trying to authenticate to associate a TOTP MFA\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  ;\n\n  _proto.associateSoftwareToken = function associateSoftwareToken(callback) {\n    var _this15 = this;\n\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      this.client.request('AssociateSoftwareToken', {\n        Session: this.Session\n      }, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n\n        _this15.Session = data.Session;\n        return callback.associateSecretCode(data.SecretCode);\n      });\n    } else {\n      this.client.request('AssociateSoftwareToken', {\n        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n      }, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n\n        return callback.associateSecretCode(data.SecretCode);\n      });\n    }\n  }\n  /**\n   * This is used by an authenticated or a user trying to authenticate to verify a TOTP MFA\n   * @param {string} totpCode The MFA code entered by the user.\n   * @param {string} friendlyDeviceName The device name we are assigning to the device.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  ;\n\n  _proto.verifySoftwareToken = function verifySoftwareToken(totpCode, friendlyDeviceName, callback) {\n    var _this16 = this;\n\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      this.client.request('VerifySoftwareToken', {\n        Session: this.Session,\n        UserCode: totpCode,\n        FriendlyDeviceName: friendlyDeviceName\n      }, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n\n        _this16.Session = data.Session;\n        var challengeResponses = {};\n        challengeResponses.USERNAME = _this16.username;\n        var jsonReq = {\n          ChallengeName: 'MFA_SETUP',\n          ClientId: _this16.pool.getClientId(),\n          ChallengeResponses: challengeResponses,\n          Session: _this16.Session\n        };\n\n        if (_this16.getUserContextData()) {\n          jsonReq.UserContextData = _this16.getUserContextData();\n        }\n\n        _this16.client.request('RespondToAuthChallenge', jsonReq, function (errRespond, dataRespond) {\n          if (errRespond) {\n            return callback.onFailure(errRespond);\n          }\n\n          _this16.signInUserSession = _this16.getCognitoUserSession(dataRespond.AuthenticationResult);\n\n          _this16.cacheTokens();\n\n          return callback.onSuccess(_this16.signInUserSession);\n        });\n\n        return undefined;\n      });\n    } else {\n      this.client.request('VerifySoftwareToken', {\n        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n        UserCode: totpCode,\n        FriendlyDeviceName: friendlyDeviceName\n      }, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n\n        return callback.onSuccess(data);\n      });\n    }\n  };\n\n  return CognitoUser;\n}();\n\nexport { CognitoUser as default };"]},"metadata":{},"sourceType":"module"}