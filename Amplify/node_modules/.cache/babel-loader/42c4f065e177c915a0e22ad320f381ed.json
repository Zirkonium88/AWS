{"ast":null,"code":"/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\nimport Client from './Client';\nimport CognitoUser from './CognitoUser';\nimport StorageHelper from './StorageHelper';\n/** @class */\n\nvar CognitoUserPool =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Constructs a new CognitoUserPool object\n   * @param {object} data Creation options.\n   * @param {string} data.UserPoolId Cognito user pool id.\n   * @param {string} data.ClientId User pool application client id.\n   * @param {object} data.Storage Optional storage object.\n   * @param {boolean} data.AdvancedSecurityDataCollectionFlag Optional:\n   *        boolean flag indicating if the data collection is enabled\n   *        to support cognito advanced security features. By default, this\n   *        flag is set to true.\n   */\n  function CognitoUserPool(data) {\n    var _ref = data || {},\n        UserPoolId = _ref.UserPoolId,\n        ClientId = _ref.ClientId,\n        endpoint = _ref.endpoint,\n        AdvancedSecurityDataCollectionFlag = _ref.AdvancedSecurityDataCollectionFlag;\n\n    if (!UserPoolId || !ClientId) {\n      throw new Error('Both UserPoolId and ClientId are required.');\n    }\n\n    if (!/^[\\w-]+_.+$/.test(UserPoolId)) {\n      throw new Error('Invalid UserPoolId format.');\n    }\n\n    var region = UserPoolId.split('_')[0];\n    this.userPoolId = UserPoolId;\n    this.clientId = ClientId;\n    this.client = new Client(region, endpoint);\n    /**\n     * By default, AdvancedSecurityDataCollectionFlag is set to true,\n     * if no input value is provided.\n     */\n\n    this.advancedSecurityDataCollectionFlag = AdvancedSecurityDataCollectionFlag !== false;\n    this.storage = data.Storage || new StorageHelper().getStorage();\n  }\n  /**\n   * @returns {string} the user pool id\n   */\n\n\n  var _proto = CognitoUserPool.prototype;\n\n  _proto.getUserPoolId = function getUserPoolId() {\n    return this.userPoolId;\n  }\n  /**\n   * @returns {string} the client id\n   */\n  ;\n\n  _proto.getClientId = function getClientId() {\n    return this.clientId;\n  }\n  /**\n   * @typedef {object} SignUpResult\n   * @property {CognitoUser} user New user.\n   * @property {bool} userConfirmed If the user is already confirmed.\n   */\n\n  /**\n   * method for signing up a user\n   * @param {string} username User's username.\n   * @param {string} password Plain-text initial password entered by user.\n   * @param {(AttributeArg[])=} userAttributes New user attributes.\n   * @param {(AttributeArg[])=} validationData Application metadata.\n   * @param {(AttributeArg[])=} clientMetadata Client metadata.\n   * @param {nodeCallback<SignUpResult>} callback Called on error or with the new user.\n   * @returns {void}\n   */\n  ;\n\n  _proto.signUp = function signUp(username, password, userAttributes, validationData, callback, clientMetadata) {\n    var _this = this;\n\n    var jsonReq = {\n      ClientId: this.clientId,\n      Username: username,\n      Password: password,\n      UserAttributes: userAttributes,\n      ValidationData: validationData,\n      ClientMetadata: clientMetadata\n    };\n\n    if (this.getUserContextData(username)) {\n      jsonReq.UserContextData = this.getUserContextData(username);\n    }\n\n    this.client.request('SignUp', jsonReq, function (err, data) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      var cognitoUser = {\n        Username: username,\n        Pool: _this,\n        Storage: _this.storage\n      };\n      var returnData = {\n        user: new CognitoUser(cognitoUser),\n        userConfirmed: data.UserConfirmed,\n        userSub: data.UserSub,\n        codeDeliveryDetails: data.CodeDeliveryDetails\n      };\n      return callback(null, returnData);\n    });\n  }\n  /**\n   * method for getting the current user of the application from the local storage\n   *\n   * @returns {CognitoUser} the user retrieved from storage\n   */\n  ;\n\n  _proto.getCurrentUser = function getCurrentUser() {\n    var lastUserKey = \"CognitoIdentityServiceProvider.\" + this.clientId + \".LastAuthUser\";\n    var lastAuthUser = this.storage.getItem(lastUserKey);\n\n    if (lastAuthUser) {\n      var cognitoUser = {\n        Username: lastAuthUser,\n        Pool: this,\n        Storage: this.storage\n      };\n      return new CognitoUser(cognitoUser);\n    }\n\n    return null;\n  }\n  /**\n   * This method returns the encoded data string used for cognito advanced security feature.\n   * This would be generated only when developer has included the JS used for collecting the\n   * data on their client. Please refer to documentation to know more about using AdvancedSecurity\n   * features\n   * @param {string} username the username for the context data\n   * @returns {string} the user context data\n   **/\n  ;\n\n  _proto.getUserContextData = function getUserContextData(username) {\n    if (typeof AmazonCognitoAdvancedSecurityData === 'undefined') {\n      return undefined;\n    }\n    /* eslint-disable */\n\n\n    var amazonCognitoAdvancedSecurityDataConst = AmazonCognitoAdvancedSecurityData;\n    /* eslint-enable */\n\n    if (this.advancedSecurityDataCollectionFlag) {\n      var advancedSecurityData = amazonCognitoAdvancedSecurityDataConst.getData(username, this.userPoolId, this.clientId);\n\n      if (advancedSecurityData) {\n        var userContextData = {\n          EncodedData: advancedSecurityData\n        };\n        return userContextData;\n      }\n    }\n\n    return {};\n  };\n\n  return CognitoUserPool;\n}();\n\nexport { CognitoUserPool as default };","map":{"version":3,"sources":["/Users/mwalkowiak/Library/Mobile Documents/com~apple~CloudDocs/Documents/Montessori/hoursnotes/node_modules/amazon-cognito-identity-js/es/CognitoUserPool.js"],"names":["Client","CognitoUser","StorageHelper","CognitoUserPool","data","_ref","UserPoolId","ClientId","endpoint","AdvancedSecurityDataCollectionFlag","Error","test","region","split","userPoolId","clientId","client","advancedSecurityDataCollectionFlag","storage","Storage","getStorage","_proto","prototype","getUserPoolId","getClientId","signUp","username","password","userAttributes","validationData","callback","clientMetadata","_this","jsonReq","Username","Password","UserAttributes","ValidationData","ClientMetadata","getUserContextData","UserContextData","request","err","cognitoUser","Pool","returnData","user","userConfirmed","UserConfirmed","userSub","UserSub","codeDeliveryDetails","CodeDeliveryDetails","getCurrentUser","lastUserKey","lastAuthUser","getItem","AmazonCognitoAdvancedSecurityData","undefined","amazonCognitoAdvancedSecurityDataConst","advancedSecurityData","getData","userContextData","EncodedData","default"],"mappings":"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","sourcesContent":["/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\nimport Client from './Client';\nimport CognitoUser from './CognitoUser';\nimport StorageHelper from './StorageHelper';\n/** @class */\n\nvar CognitoUserPool =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Constructs a new CognitoUserPool object\n   * @param {object} data Creation options.\n   * @param {string} data.UserPoolId Cognito user pool id.\n   * @param {string} data.ClientId User pool application client id.\n   * @param {object} data.Storage Optional storage object.\n   * @param {boolean} data.AdvancedSecurityDataCollectionFlag Optional:\n   *        boolean flag indicating if the data collection is enabled\n   *        to support cognito advanced security features. By default, this\n   *        flag is set to true.\n   */\n  function CognitoUserPool(data) {\n    var _ref = data || {},\n        UserPoolId = _ref.UserPoolId,\n        ClientId = _ref.ClientId,\n        endpoint = _ref.endpoint,\n        AdvancedSecurityDataCollectionFlag = _ref.AdvancedSecurityDataCollectionFlag;\n\n    if (!UserPoolId || !ClientId) {\n      throw new Error('Both UserPoolId and ClientId are required.');\n    }\n\n    if (!/^[\\w-]+_.+$/.test(UserPoolId)) {\n      throw new Error('Invalid UserPoolId format.');\n    }\n\n    var region = UserPoolId.split('_')[0];\n    this.userPoolId = UserPoolId;\n    this.clientId = ClientId;\n    this.client = new Client(region, endpoint);\n    /**\n     * By default, AdvancedSecurityDataCollectionFlag is set to true,\n     * if no input value is provided.\n     */\n\n    this.advancedSecurityDataCollectionFlag = AdvancedSecurityDataCollectionFlag !== false;\n    this.storage = data.Storage || new StorageHelper().getStorage();\n  }\n  /**\n   * @returns {string} the user pool id\n   */\n\n\n  var _proto = CognitoUserPool.prototype;\n\n  _proto.getUserPoolId = function getUserPoolId() {\n    return this.userPoolId;\n  }\n  /**\n   * @returns {string} the client id\n   */\n  ;\n\n  _proto.getClientId = function getClientId() {\n    return this.clientId;\n  }\n  /**\n   * @typedef {object} SignUpResult\n   * @property {CognitoUser} user New user.\n   * @property {bool} userConfirmed If the user is already confirmed.\n   */\n\n  /**\n   * method for signing up a user\n   * @param {string} username User's username.\n   * @param {string} password Plain-text initial password entered by user.\n   * @param {(AttributeArg[])=} userAttributes New user attributes.\n   * @param {(AttributeArg[])=} validationData Application metadata.\n   * @param {(AttributeArg[])=} clientMetadata Client metadata.\n   * @param {nodeCallback<SignUpResult>} callback Called on error or with the new user.\n   * @returns {void}\n   */\n  ;\n\n  _proto.signUp = function signUp(username, password, userAttributes, validationData, callback, clientMetadata) {\n    var _this = this;\n\n    var jsonReq = {\n      ClientId: this.clientId,\n      Username: username,\n      Password: password,\n      UserAttributes: userAttributes,\n      ValidationData: validationData,\n      ClientMetadata: clientMetadata\n    };\n\n    if (this.getUserContextData(username)) {\n      jsonReq.UserContextData = this.getUserContextData(username);\n    }\n\n    this.client.request('SignUp', jsonReq, function (err, data) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      var cognitoUser = {\n        Username: username,\n        Pool: _this,\n        Storage: _this.storage\n      };\n      var returnData = {\n        user: new CognitoUser(cognitoUser),\n        userConfirmed: data.UserConfirmed,\n        userSub: data.UserSub,\n        codeDeliveryDetails: data.CodeDeliveryDetails\n      };\n      return callback(null, returnData);\n    });\n  }\n  /**\n   * method for getting the current user of the application from the local storage\n   *\n   * @returns {CognitoUser} the user retrieved from storage\n   */\n  ;\n\n  _proto.getCurrentUser = function getCurrentUser() {\n    var lastUserKey = \"CognitoIdentityServiceProvider.\" + this.clientId + \".LastAuthUser\";\n    var lastAuthUser = this.storage.getItem(lastUserKey);\n\n    if (lastAuthUser) {\n      var cognitoUser = {\n        Username: lastAuthUser,\n        Pool: this,\n        Storage: this.storage\n      };\n      return new CognitoUser(cognitoUser);\n    }\n\n    return null;\n  }\n  /**\n   * This method returns the encoded data string used for cognito advanced security feature.\n   * This would be generated only when developer has included the JS used for collecting the\n   * data on their client. Please refer to documentation to know more about using AdvancedSecurity\n   * features\n   * @param {string} username the username for the context data\n   * @returns {string} the user context data\n   **/\n  ;\n\n  _proto.getUserContextData = function getUserContextData(username) {\n    if (typeof AmazonCognitoAdvancedSecurityData === 'undefined') {\n      return undefined;\n    }\n    /* eslint-disable */\n\n\n    var amazonCognitoAdvancedSecurityDataConst = AmazonCognitoAdvancedSecurityData;\n    /* eslint-enable */\n\n    if (this.advancedSecurityDataCollectionFlag) {\n      var advancedSecurityData = amazonCognitoAdvancedSecurityDataConst.getData(username, this.userPoolId, this.clientId);\n\n      if (advancedSecurityData) {\n        var userContextData = {\n          EncodedData: advancedSecurityData\n        };\n        return userContextData;\n      }\n    }\n\n    return {};\n  };\n\n  return CognitoUserPool;\n}();\n\nexport { CognitoUserPool as default };"]},"metadata":{},"sourceType":"module"}