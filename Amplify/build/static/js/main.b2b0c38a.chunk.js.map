{"version":3,"sources":["graphql/mutations.js","graphql/queries.js","aws-exports.js","App.js","serviceWorker.js","index.js"],"names":["createTodo","deleteTodo","listTodos","awsmobile","Amplify","configure","aws_exports","App","state","name","date","description","hours","todos","onChange","event","setState","target","value","CreateTodo","a","async","todo","variables","input","API","graphql","graphqlOperation","console","log","listNotes","DeleteTodo","id","result","this","data","items","concat","map","item","i","className","role","key","type","data-dismiss","aria-label","onClick","bind","aria-hidden","placeholder","Component","withAuthenticator","includeGreetings","signUpConfig","hiddenDefaults","signUpFields","label","required","Boolean","window","location","hostname","match","config","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b2b0c38a.chunk.js","sourcesContent":["/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const createTodo = `mutation CreateTodo(\n  $input: CreateTodoInput!\n  $condition: ModelTodoConditionInput\n) {\n  createTodo(input: $input, condition: $condition) {\n    id\n    name\n    date\n    description\n    hours\n    owner\n  }\n}\n`;\nexport const updateTodo = `mutation UpdateTodo(\n  $input: UpdateTodoInput!\n  $condition: ModelTodoConditionInput\n) {\n  updateTodo(input: $input, condition: $condition) {\n    id\n    name\n    date\n    description\n    hours\n    owner\n  }\n}\n`;\nexport const deleteTodo = `mutation DeleteTodo(\n  $input: DeleteTodoInput!\n  $condition: ModelTodoConditionInput\n) {\n  deleteTodo(input: $input, condition: $condition) {\n    id\n    name\n    date\n    description\n    hours\n    owner\n  }\n}\n`;\n","/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const getTodo = `query GetTodo($id: ID!) {\n  getTodo(id: $id) {\n    id\n    name\n    date\n    description\n    hours\n    owner\n  }\n}\n`;\nexport const listTodos = `query ListTodos(\n  $filter: ModelTodoFilterInput\n  $limit: Int\n  $nextToken: String\n) {\n  listTodos(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    items {\n      id\n      name\n      date\n      description\n      hours\n      owner\n    }\n    nextToken\n  }\n}\n`;\n","// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"eu-central-1\",\n    \"aws_cognito_identity_pool_id\": \"eu-central-1:e1d6329a-6ca9-4aeb-9777-5159323d5992\",\n    \"aws_cognito_region\": \"eu-central-1\",\n    \"aws_user_pools_id\": \"eu-central-1_aYOJFsYR1\",\n    \"aws_user_pools_web_client_id\": \"1hs3vshmc3nodnbv76tv0jcjku\",\n    \"oauth\": {},\n    \"aws_appsync_graphqlEndpoint\": \"https://pxl4zxtebbem3kib2yj3tl4ghq.appsync-api.eu-central-1.amazonaws.com/graphql\",\n    \"aws_appsync_region\": \"eu-central-1\",\n    \"aws_appsync_authenticationType\": \"AMAZON_COGNITO_USER_POOLS\",\n    \"aws_content_delivery_bucket\": \"hoursnotes-20200114170828-hostingbucket-dev\",\n    \"aws_content_delivery_bucket_region\": \"eu-central-1\",\n    \"aws_content_delivery_url\": \"https://d3l321yj7z92uf.cloudfront.net\"\n};\n\n\nexport default awsmobile;\n","import React, { Component } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Amplify, {API,graphqlOperation} from 'aws-amplify';\nimport { withAuthenticator} from 'aws-amplify-react';\nimport { createTodo, deleteTodo } from \"./graphql/mutations\"\nimport { listTodos } from \"./graphql/queries\"\nimport aws_exports from './aws-exports'; // specify the location of aws-exports.js file on your project\nAmplify.configure(aws_exports);\n\nclass App extends Component {\n  //create initial state\n  state = {name: '', date: '', description: '', hours: '', todos: [] }\n  \n  //update state when user types into inputs\n  onChange = event => {\n    this.setState({ [event.target.name]: event.target.value })\n  }\n\n  // list current entries\n  async listNotes(){\n    const todos = await API.graphql(graphqlOperation(listTodos));\n    this.setState({ todos: todos.data.listTodos.items })\n  }\n\n  //update entries in gui\n  async componentDidMount() {\n    try {\n      const todos = await API.graphql(graphqlOperation(listTodos))\n      console.log('showing todos: ', todos)\n      this.setState({ todos: todos.data.listTodos.items })\n    } catch (err) {\n      console.log('error fetching data: ', err)\n    }\n  }\n  \n  // create enrties\n  CreateTodo = async() => {\n    if (\n      this.state.name === '' ||\n      this.state.date === '' || \n      this.state.description === '' || \n      this.state.hours === ''\n    ) return\n    try {\n      const todo = { \n        name: this.state.name, \n        date: this.state.date, \n        description: this.state.description,\n        hours: this.state.hours \n      }\n      const variables = {\n        input: todo, // key is \"input\" based on the mutation above\n      };\n      \n      const todos = [...this.state.todos, todo]\n      this.setState({ name: '', date: '', description: '' , hours: '', todos })\n      await API.graphql(graphqlOperation(createTodo, variables))\n      console.log('todo successfully created!', todo)\n      this.listNotes();\n    } catch (err) {\n      console.log('error creating todo ...', err)\n    }\n  }\n\n  // Delete entries \n  DeleteTodo = async(id)  => {\n    try{\n      const input = { id: id }\n      const result = await API.graphql(graphqlOperation(deleteTodo, { input }))\n      console.log('todo successfully deleted!', { result })\n      this.listNotes();\n    } catch (err) {\n      console.log('error deleting todo ...', err)\n    }\n\t}\n\n  //render the component\n  render() {\n    const data = [].concat(this.state.todos).map((item,i)=> \n      <div className=\"alert alert-primary alert-dismissible show\" role=\"alert\">\n        <span key={item.i}>\n          Name: {item.name} Datum: {item.date} Elternarbeit: {item.description} Stunden: {item.hours} \n        </span>\n        <button \n          key={item.i} \n          type=\"button\" \n          className=\"close\" \n          data-dismiss=\"alert\" \n          aria-label=\"Close\" \n          onClick={this.DeleteTodo.bind(this, item.id)}>\n          <span aria-hidden=\"true\">&times;</span>\n        </button>\n      </div>\n      )\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <legend>Trag' deine Elternstunden in das Formular ein.</legend>\n            <form>\n              <p>\n                <input id=\"name\" type=\"text\" placeholder=\"Name\" className=\"form-control\" value={this.state.name} onChange={this.onChange} name='name' />\n              </p>\n              <p>\n                <input id=\"date\" type=\"text\" placeholder=\"Datum der Elternarbeit\" className=\"form-control\" value={this.state.date} onChange={this.onChange} name='date' />\n              </p>\n              <p>\n              <input id=\"description\" type=\"text\" placeholder=\"Beschreibung der Elternarbeit\" className=\"form-control\" value={this.state.description} onChange={this.onChange} name='description' />\n              </p>\n              <p>\n                <input id=\"hours\" type=\"number\" placeholder=\"Anzahl Elternstunden\" className=\"form-control\" value={this.state.hours} onChange={this.onChange} name='hours' />\n              </p>\n              <button type=\"submit\" className=\"btn btn-primary\" onClick={this.CreateTodo}>Eintrag vornehmen</button>\n            </form>\n        </div>\n        <hr></hr>\n        <div className=\"container\">\n          <legend>Erfasste Elternstunden</legend>\n          <p>Falsch erfasste Stunden bitten löschen und neu eintragen.</p>\n            {data}\n        </div>\n        <hr></hr>\n      </div>\n\n    )\n  }\n}\n\nexport default withAuthenticator(App, {\n  includeGreetings: true,\n  signUpConfig: {\n    hiddenDefaults: [\"phone_number\"],\n    signUpFields: [\n      { label: \"Familienname\", key: \"name\", required: true, type: \"string\" }\n    ]\n  }\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Amplify from 'aws-amplify'\nimport config from './aws-exports'\nAmplify.configure(config)\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}