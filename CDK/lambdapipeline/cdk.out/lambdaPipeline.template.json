{
  "Resources": {
    "PipeBucket0A689C15": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        },
        "BucketName": "431892011317-pipe"
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "lambdaPipeline/Pipe_Bucket/Resource"
      }
    },
    "PipeBucketNotifications0B54F6A8": {
      "Type": "Custom::S3BucketNotifications",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
            "Arn"
          ]
        },
        "BucketName": {
          "Ref": "PipeBucket0A689C15"
        },
        "NotificationConfiguration": {
          "LambdaFunctionConfigurations": [
            {
              "Events": [
                "s3:ObjectCreated:*"
              ],
              "Filter": {
                "Key": {
                  "FilterRules": [
                    {
                      "Name": "suffix",
                      "Value": ".csv"
                    },
                    {
                      "Name": "prefix",
                      "Value": "data"
                    }
                  ]
                }
              },
              "LambdaFunctionArn": {
                "Fn::GetAtt": [
                  "PipeLambda247A18FB",
                  "Arn"
                ]
              }
            }
          ]
        }
      },
      "DependsOn": [
        "PipeLambdaAllowBucketNotificationsFromlambdaPipelinePipeBucket3886726BC3E8C5ED"
      ],
      "Metadata": {
        "aws:cdk:path": "lambdaPipeline/Pipe_Bucket/Notifications/Resource"
      }
    },
    "DLQLoadDataLambdaEFE21EE4": {
      "Type": "AWS::SQS::Queue",
      "Metadata": {
        "aws:cdk:path": "lambdaPipeline/DLQ_LoadData_Lambda/Resource"
      }
    },
    "PipeLambdaServiceRoleD98950EE": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "lambdaPipeline/Pipe_Lambda/ServiceRole/Resource"
      }
    },
    "PipeLambdaServiceRoleDefaultPolicyFC9EC737": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "sqs:SendMessage",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "DLQLoadDataLambdaEFE21EE4",
                  "Arn"
                ]
              }
            },
            {
              "Action": [
                "s3:GetBucket*",
                "s3:GetObject*",
                "s3:List*",
                "s3:Head*"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "PipeBucket0A689C15",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "PipeBucket0A689C15",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": [
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "LoadDataTableFD0A0933",
                    "Arn"
                  ]
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "PipeLambdaServiceRoleDefaultPolicyFC9EC737",
        "Roles": [
          {
            "Ref": "PipeLambdaServiceRoleD98950EE"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "lambdaPipeline/Pipe_Lambda/ServiceRole/DefaultPolicy/Resource"
      }
    },
    "PipeLambda247A18FB": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "AssetParametersa4b4635e87d896f4581e8bf2599e069191c06e0c4d43047f0972c155a5cd97a6S3Bucket5E4DEC63"
          },
          "S3Key": {
            "Fn::Join": [
              "",
              [
                {
                  "Fn::Select": [
                    0,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParametersa4b4635e87d896f4581e8bf2599e069191c06e0c4d43047f0972c155a5cd97a6S3VersionKeyDFE70B98"
                        }
                      ]
                    }
                  ]
                },
                {
                  "Fn::Select": [
                    1,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParametersa4b4635e87d896f4581e8bf2599e069191c06e0c4d43047f0972c155a5cd97a6S3VersionKeyDFE70B98"
                        }
                      ]
                    }
                  ]
                }
              ]
            ]
          }
        },
        "Handler": "loaddata.LoadData",
        "Role": {
          "Fn::GetAtt": [
            "PipeLambdaServiceRoleD98950EE",
            "Arn"
          ]
        },
        "Runtime": "python3.8",
        "DeadLetterConfig": {
          "TargetArn": {
            "Fn::GetAtt": [
              "DLQLoadDataLambdaEFE21EE4",
              "Arn"
            ]
          }
        },
        "Environment": {
          "Variables": {
            "TABLE_NAME": {
              "Ref": "LoadDataTableFD0A0933"
            }
          }
        },
        "FunctionName": "Lambda_Put_Data_from_File_into_DynamoDB",
        "MemorySize": 128,
        "Timeout": 30
      },
      "DependsOn": [
        "PipeLambdaServiceRoleDefaultPolicyFC9EC737",
        "PipeLambdaServiceRoleD98950EE"
      ],
      "Metadata": {
        "aws:cdk:path": "lambdaPipeline/Pipe_Lambda/Resource",
        "aws:asset:path": "asset.a4b4635e87d896f4581e8bf2599e069191c06e0c4d43047f0972c155a5cd97a6",
        "aws:asset:property": "Code"
      }
    },
    "PipeLambdaLogRetention3B76E0F6": {
      "Type": "Custom::LogRetention",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A",
            "Arn"
          ]
        },
        "LogGroupName": {
          "Fn::Join": [
            "",
            [
              "/aws/lambda/",
              {
                "Ref": "PipeLambda247A18FB"
              }
            ]
          ]
        },
        "RetentionInDays": 1
      },
      "Metadata": {
        "aws:cdk:path": "lambdaPipeline/Pipe_Lambda/LogRetention/Resource"
      }
    },
    "PipeLambdaEventInvokeConfig649FF8A5": {
      "Type": "AWS::Lambda::EventInvokeConfig",
      "Properties": {
        "FunctionName": {
          "Ref": "PipeLambda247A18FB"
        },
        "Qualifier": "$LATEST",
        "MaximumRetryAttempts": 1
      },
      "Metadata": {
        "aws:cdk:path": "lambdaPipeline/Pipe_Lambda/EventInvokeConfig/Resource"
      }
    },
    "PipeLambdaAllowBucketNotificationsFromlambdaPipelinePipeBucket3886726BC3E8C5ED": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "PipeLambda247A18FB",
            "Arn"
          ]
        },
        "Principal": "s3.amazonaws.com",
        "SourceAccount": {
          "Ref": "AWS::AccountId"
        },
        "SourceArn": {
          "Fn::GetAtt": [
            "PipeBucket0A689C15",
            "Arn"
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "lambdaPipeline/Pipe_Lambda/AllowBucketNotificationsFromlambdaPipelinePipeBucket3886726B"
      }
    },
    "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "lambdaPipeline/LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8a/ServiceRole/Resource"
      }
    },
    "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:PutRetentionPolicy",
                "logs:DeleteRetentionPolicy"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB",
        "Roles": [
          {
            "Ref": "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "lambdaPipeline/LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8a/ServiceRole/DefaultPolicy/Resource"
      }
    },
    "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "AssetParameters5741f85917ffca30b209ad61e375d3d3bae0457270071f7aca8ca81be19bd22aS3Bucket4E933C7F"
          },
          "S3Key": {
            "Fn::Join": [
              "",
              [
                {
                  "Fn::Select": [
                    0,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters5741f85917ffca30b209ad61e375d3d3bae0457270071f7aca8ca81be19bd22aS3VersionKeyB83CC434"
                        }
                      ]
                    }
                  ]
                },
                {
                  "Fn::Select": [
                    1,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters5741f85917ffca30b209ad61e375d3d3bae0457270071f7aca8ca81be19bd22aS3VersionKeyB83CC434"
                        }
                      ]
                    }
                  ]
                }
              ]
            ]
          }
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x"
      },
      "DependsOn": [
        "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB",
        "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB"
      ],
      "Metadata": {
        "aws:cdk:path": "lambdaPipeline/LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8a/Resource",
        "aws:asset:path": "asset.5741f85917ffca30b209ad61e375d3d3bae0457270071f7aca8ca81be19bd22a",
        "aws:asset:property": "Code"
      }
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "lambdaPipeline/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource"
      }
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:PutBucketNotification",
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
        "Roles": [
          {
            "Ref": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "lambdaPipeline/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource"
      }
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Description": "AWS CloudFormation handler for \"Custom::S3BucketNotifications\" resources (@aws-cdk/aws-s3)",
        "Code": {
          "ZipFile": "exports.handler = (event, context) => {\n    // eslint-disable-next-line @typescript-eslint/no-require-imports, import/no-extraneous-dependencies\n    const s3 = new (require('aws-sdk').S3)();\n    // eslint-disable-next-line @typescript-eslint/no-require-imports\n    const https = require(\"https\");\n    // eslint-disable-next-line @typescript-eslint/no-require-imports\n    const url = require(\"url\");\n    log(JSON.stringify(event, undefined, 2));\n    const props = event.ResourceProperties;\n    if (event.RequestType === 'Delete') {\n        props.NotificationConfiguration = {}; // this is how you clean out notifications\n    }\n    const req = {\n        Bucket: props.BucketName,\n        NotificationConfiguration: props.NotificationConfiguration\n    };\n    return s3.putBucketNotificationConfiguration(req, (err, data) => {\n        log({ err, data });\n        if (err) {\n            return submitResponse(\"FAILED\", err.message + `\\nMore information in CloudWatch Log Stream: ${context.logStreamName}`);\n        }\n        else {\n            return submitResponse(\"SUCCESS\");\n        }\n    });\n    function log(obj) {\n        console.error(event.RequestId, event.StackId, event.LogicalResourceId, obj);\n    }\n    // tslint:disable-next-line:max-line-length\n    // adapted from https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lambda-function-code.html#cfn-lambda-function-code-cfnresponsemodule\n    // to allow sending an error messge as a reason.\n    function submitResponse(responseStatus, reason) {\n        const responseBody = JSON.stringify({\n            Status: responseStatus,\n            Reason: reason || \"See the details in CloudWatch Log Stream: \" + context.logStreamName,\n            PhysicalResourceId: event.PhysicalResourceId || event.LogicalResourceId,\n            StackId: event.StackId,\n            RequestId: event.RequestId,\n            LogicalResourceId: event.LogicalResourceId,\n            NoEcho: false,\n        });\n        log({ responseBody });\n        const parsedUrl = url.parse(event.ResponseURL);\n        const options = {\n            hostname: parsedUrl.hostname,\n            port: 443,\n            path: parsedUrl.path,\n            method: \"PUT\",\n            headers: {\n                \"content-type\": \"\",\n                \"content-length\": responseBody.length\n            }\n        };\n        const request = https.request(options, (r) => {\n            log({ statusCode: r.statusCode, statusMessage: r.statusMessage });\n            context.done();\n        });\n        request.on(\"error\", (error) => {\n            log({ sendError: error });\n            context.done();\n        });\n        request.write(responseBody);\n        request.end();\n    }\n};"
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Timeout": 300
      },
      "DependsOn": [
        "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
        "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
      ],
      "Metadata": {
        "aws:cdk:path": "lambdaPipeline/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource"
      }
    },
    "LoadDataTableFD0A0933": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "KeySchema": [
          {
            "AttributeName": "uuid",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "name",
            "KeyType": "RANGE"
          }
        ],
        "AttributeDefinitions": [
          {
            "AttributeName": "uuid",
            "AttributeType": "S"
          },
          {
            "AttributeName": "name",
            "AttributeType": "S"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 5,
          "WriteCapacityUnits": 5
        },
        "TableName": "LambdaPipeTable"
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "lambdaPipeline/LoadData_Table/Resource"
      }
    }
  },
  "Parameters": {
    "AssetParametersa4b4635e87d896f4581e8bf2599e069191c06e0c4d43047f0972c155a5cd97a6S3Bucket5E4DEC63": {
      "Type": "String",
      "Description": "S3 bucket for asset \"a4b4635e87d896f4581e8bf2599e069191c06e0c4d43047f0972c155a5cd97a6\""
    },
    "AssetParametersa4b4635e87d896f4581e8bf2599e069191c06e0c4d43047f0972c155a5cd97a6S3VersionKeyDFE70B98": {
      "Type": "String",
      "Description": "S3 key for asset version \"a4b4635e87d896f4581e8bf2599e069191c06e0c4d43047f0972c155a5cd97a6\""
    },
    "AssetParametersa4b4635e87d896f4581e8bf2599e069191c06e0c4d43047f0972c155a5cd97a6ArtifactHashB8C19088": {
      "Type": "String",
      "Description": "Artifact hash for asset \"a4b4635e87d896f4581e8bf2599e069191c06e0c4d43047f0972c155a5cd97a6\""
    },
    "AssetParameters5741f85917ffca30b209ad61e375d3d3bae0457270071f7aca8ca81be19bd22aS3Bucket4E933C7F": {
      "Type": "String",
      "Description": "S3 bucket for asset \"5741f85917ffca30b209ad61e375d3d3bae0457270071f7aca8ca81be19bd22a\""
    },
    "AssetParameters5741f85917ffca30b209ad61e375d3d3bae0457270071f7aca8ca81be19bd22aS3VersionKeyB83CC434": {
      "Type": "String",
      "Description": "S3 key for asset version \"5741f85917ffca30b209ad61e375d3d3bae0457270071f7aca8ca81be19bd22a\""
    },
    "AssetParameters5741f85917ffca30b209ad61e375d3d3bae0457270071f7aca8ca81be19bd22aArtifactHash5A536F97": {
      "Type": "String",
      "Description": "Artifact hash for asset \"5741f85917ffca30b209ad61e375d3d3bae0457270071f7aca8ca81be19bd22a\""
    }
  }
}